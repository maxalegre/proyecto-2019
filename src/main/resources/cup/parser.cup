package uy.edu.ucu.jsonql2019.parser;

import uy.edu.ucu.jsonql2019.ast.*;
import java.io.*;
import java.util.*;
import java_cup.runtime.Symbol;

parser code {:
	public void syntax_error(Symbol currentToken) {
		report_error("Syntax error at [" + (currentToken.left+1) +"," + (currentToken.right+1) +"]", null);
	}

	public static Symbol parse(Reader input) throws Exception {
		return (new JSONQLParser(new JSONQLLexer(input))).parse();
	}

	public static void main(String[] args) throws Exception {
		if (args.length < 1) {
			System.out.println(parse(new InputStreamReader(System.in, "UTF8")).value);
		} else for (int i = 0; i < args.length; ++i) {
			System.out.println(parse(new InputStreamReader(new FileInputStream(args[i]), "UTF8")).value);
		}
	}
:}


terminal ROOT, MULT, DIV, LPARENT, RPARENT, EQ, EQUAL, NOT_EQUAL, LESS, GREATER, LESS_EQUAL, GREATER_EQUAL, NOT, AND, OR, PLUS, MINUS, LBRACE, RBRACE, LBRACK, RBRACK, COLON, COMMA, NULL, ENC, ENCA, NENCA, IF, ELSE, DOT, LET, IN, BSLASH, OPASIGN;
terminal Double NUMBER;
terminal String	STRING, REGEX;
terminal Boolean BOOL;
terminal JSONQLIdentifier ID;

non terminal JSONQLExpression S, EXP, C;
non terminal JSONQLObjectExpression OBJECT; 
non terminal JSONQLArrayExpression ARRAY;       
non terminal List<JSONQLExpression> VALUES, MEM_VALUES, MEM_LIST, MEM_ELEMENT;
non terminal Map<JSONQLExpression,JSONQLExpression> PAIRS;  
non terminal JSONQLMemberExpression INDIZ;
non terminal JSONQLArrayComprehension ACOMP;

precedence left PLUS, MINUS;   
precedence left MULT, DIV;   
precedence left AND, EQUAL, OR, NOT_EQUAL, GREATER, LESS, GREATER_EQUAL, LESS_EQUAL;
precedence left ENC, ENCA, NENCA; 

start with S;

S ::= EXP:op {: RESULT = op; :} |
	  INDIZ:ind {: RESULT = ind; :} |  
	  C:s {: RESULT=s; :} |
	  ACOMP:a {: RESULT=a; :} ;	

EXP ::= ROOT {: RESULT = JSONQLRoot.ROOT; :} |
		BOOL:b {: RESULT = new JSONQLLiteral(b); :} |
		NUMBER:n {: RESULT = new JSONQLLiteral(n); :} |
		STRING:s {: RESULT = new JSONQLLiteral(s); :} |
	  	NULL {:RESULT = new JSONQLLiteral(null); :} |
       	OBJECT:o {: RESULT = o; :} |  
       	ARRAY:a  {: RESULT = a; :} |
       	REGEX:re{: RESULT= new JSONQLLiteral(re); :}  |
       	MINUS EXP:n {: RESULT = new JSONQLUnaryExpression("-",n); :} |
       	PLUS EXP:n {: RESULT = new JSONQLUnaryExpression("+",n); :} |
       	LPARENT EXP:r RPARENT {: RESULT = r; :} |
       	EXP:l MULT EXP:r {: RESULT = new JSONQLBinaryExpression("*",l,r); :} |
		EXP:l DIV EXP:r {: RESULT = new JSONQLBinaryExpression("/",l,r); :} |
		EXP:l PLUS EXP:r {: RESULT = new JSONQLBinaryExpression("+",l,r); :} |
		EXP:l MINUS EXP:r {: RESULT = new JSONQLBinaryExpression("-",l,r); :} |
       	EXP:n1 EQUAL EXP:n2 {: RESULT = new JSONQLBinaryExpression("==",n1,n2); :} |
		EXP:n1 NOT_EQUAL EXP:n2 {: RESULT = new JSONQLBinaryExpression("!=",n1,n2); :} |
		EXP:n1 LESS EXP:n2 {: RESULT = new JSONQLBinaryExpression("<",n1,n2); :} |
		EXP:n1 GREATER EXP:n2 {: RESULT = new JSONQLBinaryExpression(">",n1,n2); :} |
		EXP:n1 LESS_EQUAL EXP:n2 {: RESULT = new JSONQLBinaryExpression("<=",n1,n2); :} |
		EXP:n1 GREATER_EQUAL EXP:n2 {: RESULT = new JSONQLBinaryExpression(">=",n1,n2); :} |
		NOT EXP:b  {: RESULT = new JSONQLUnaryExpression("!",b); :} |
		EXP:b ENC REGEX:re {: RESULT = new JSONQLBinaryExpression("~",b,new JSONQLLiteral(re)); :} |
		EXP:b ENCA REGEX:re {: RESULT = new JSONQLBinaryExpression("~=",b,new JSONQLLiteral(re)); :} |
		EXP:b NENCA REGEX:re {: RESULT = new JSONQLBinaryExpression("!~",b,new JSONQLLiteral(re)); :}  |
		EXP:n1 AND EXP:n2 {: RESULT = new JSONQLBinaryExpression("&&",n1,n2); :} |
		EXP:n1 OR EXP:n2 {: RESULT = new JSONQLBinaryExpression("||",n1,n2); :} ;   
           	
OBJECT ::= LBRACE RBRACE {: Map<JSONQLExpression, JSONQLExpression> a = new HashMap(); RESULT = new JSONQLObjectExpression(a); :} | 
	       LBRACE PAIRS:p RBRACE {: RESULT = new JSONQLObjectExpression(p); :}; 	
			
PAIRS  ::= EXP:k COLON EXP:v {: RESULT = new HashMap<JSONQLExpression,JSONQLExpression>(); RESULT.put(k,v); :} | 
	       PAIRS:p COMMA EXP:k COLON EXP:v {: p.put(k,v); RESULT = p; :}; 
	   
ARRAY  ::= LBRACK RBRACK {: JSONQLArrayExpression a = new JSONQLArrayExpression(); RESULT = a; :} |
		   LBRACK VALUES:v RBRACK {: RESULT = new JSONQLArrayExpression(v); :} ;
 
VALUES ::= EXP:v {: List<JSONQLExpression> a = List.of(v); RESULT = a; :} |
           VALUES:a COMMA EXP:v {: a.add(v); RESULT=a; :} ;
      
C ::= LPARENT EXP:e1 RPARENT IF LPARENT EXP:e2 RPARENT ELSE LPARENT EXP:e3 RPARENT {:JSONQLConditionalExpression consulta = new JSONQLConditionalExpression(e1,e2,e3); RESULT = consulta; :} | 
	  LET ID:id EQ LPARENT EXP:e1 RPARENT IN LPARENT EXP:e2 RPARENT {: JSONQLArrayExpression a = new JSONQLArrayExpression(e1, e2); JSONQLCallExpression e = new JSONQLCallExpression("in", a.elements); RESULT = new JSONQLProperty(id, e); :} |
      ID:f1 LPARENT EXP:e1 COMMA EXP:e2 RPARENT {: JSONQLArrayExpression a = new JSONQLArrayExpression(e1, e2); RESULT = new JSONQLCallExpression("function", a.elements); :} ;

INDIZ ::= ROOT:r MEM_VALUES:e {: JSONQLExpression root = new JSONQLLiteral("$"); RESULT = new JSONQLMemberExpression(root, e); :} ;

MEM_VALUES ::= DOT ID:e {: List<JSONQLExpression> a = new ArrayList<JSONQLExpression>(); a.add(e); RESULT = a; :} |
			   MEM_VALUES:e1 DOT ID:e2 {: e1.add(e2); RESULT = e1; :} |
			   LBRACK MEM_LIST:e RBRACK {: RESULT = e; :} |
			   MEM_VALUES:e1 LBRACK MEM_LIST:e2 RBRACK {: e1.addAll(e2); RESULT = e1; :} ;
			   
MEM_LIST ::= MEM_ELEMENT:e {: RESULT = e; :} |
			 MEM_LIST:e1 COMMA MEM_ELEMENT:e2 {: e1.addAll(e2); RESULT = e1; :} ;

MEM_ELEMENT ::= INDIZ:e {: List<JSONQLExpression> a = new ArrayList<JSONQLExpression>(); a.add(e); RESULT = a; :} |
				EXP:e {: List<JSONQLExpression> a = new ArrayList<JSONQLExpression>(); a.add(e); RESULT = a; :} |  
				EXP:e1 COLON EXP:e2 {: List<JSONQLExpression> a = new ArrayList<JSONQLExpression>(); a.add(e1); a.add(e2); RESULT = a; :} |
			 	EXP:e COLON {: List<JSONQLExpression> a = new ArrayList<JSONQLExpression>(); a.add(e); RESULT = a; :} |
			 	COLON EXP:e {: List<JSONQLExpression> a = new ArrayList<JSONQLExpression>(); a.add(e); RESULT = a; :} ;
			 	
ACOMP ::= LBRACK VALUES:list BSLASH ID:e OPASIGN ROOT RBRACK {: JSONQLArrayExpression a = new JSONQLArrayExpression(list); RESULT = new JSONQLArrayComprehension(e, a.elements); :} ;



