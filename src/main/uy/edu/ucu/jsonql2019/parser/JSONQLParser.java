
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package uy.edu.ucu.jsonql2019.parser;

import uy.edu.ucu.jsonql2019.ast.*;
import java.io.*;
import java.util.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class JSONQLParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return JSONQLTokens.class;
}

  /** Default constructor. */
  @Deprecated
  public JSONQLParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public JSONQLParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public JSONQLParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\046\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\004\000\002\003\004\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\004\000\002\003\005\000\002" +
    "\003\005\000\002\004\004\000\002\004\005\000\002\007" +
    "\005\000\002\007\007\000\002\005\004\000\002\005\005" +
    "\000\002\006\003\000\002\006\005\000\002\010\004\000" +
    "\002\011\003\000\002\011\006\000\002\011\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\106\000\030\004\016\007\022\017\021\022\014\023" +
    "\004\024\005\026\020\032\013\033\010\034\015\035\006" +
    "\001\002\000\030\004\040\007\022\017\021\022\014\023" +
    "\004\024\005\026\020\032\013\033\010\034\015\035\006" +
    "\001\002\000\032\004\040\007\022\017\021\022\014\023" +
    "\004\024\005\025\073\026\020\032\013\033\010\034\015" +
    "\035\006\001\002\000\070\002\ufffd\004\ufffd\005\ufffd\006" +
    "\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd" +
    "\015\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd\023" +
    "\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd\030\ufffd\031\ufffd" +
    "\032\ufffd\033\ufffd\034\ufffd\035\ufffd\001\002\000\070\002" +
    "\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8" +
    "\012\ufff8\013\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8\020" +
    "\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8" +
    "\027\ufff8\030\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8\035" +
    "\ufff8\001\002\000\070\002\ufffc\004\ufffc\005\ufffc\006\ufffc" +
    "\007\ufffc\010\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc\015" +
    "\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc" +
    "\024\ufffc\025\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc\032" +
    "\ufffc\033\ufffc\034\ufffc\035\ufffc\001\002\000\070\002\ufff9" +
    "\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012" +
    "\ufff9\013\ufff9\014\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9" +
    "\021\ufff9\022\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9\027" +
    "\ufff9\030\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9" +
    "\001\002\000\004\002\106\001\002\000\070\002\ufffa\004" +
    "\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa" +
    "\013\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa\021" +
    "\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa\026\ufffa\027\ufffa" +
    "\030\ufffa\031\ufffa\032\ufffa\033\ufffa\034\ufffa\035\ufffa\001" +
    "\002\000\030\004\040\007\022\017\021\022\014\023\004" +
    "\024\005\026\020\032\013\033\010\034\015\035\006\001" +
    "\002\000\070\002\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb" +
    "\010\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb\016" +
    "\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb" +
    "\025\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb\033" +
    "\ufffb\034\ufffb\035\ufffb\001\002\000\056\002\ufffe\004\040" +
    "\005\ufffe\006\ufffe\007\022\011\ufffe\012\ufffe\013\ufffe\014" +
    "\ufffe\015\ufffe\016\ufffe\017\021\020\ufffe\021\ufffe\022\014" +
    "\023\004\024\005\026\020\032\013\033\010\034\015\035" +
    "\006\001\002\000\004\002\uffff\001\002\000\032\004\040" +
    "\007\022\017\021\022\014\023\004\024\005\026\020\027" +
    "\060\032\013\033\010\034\015\035\006\001\002\000\030" +
    "\004\040\007\022\017\021\022\014\023\004\024\005\026" +
    "\020\032\013\033\010\034\015\035\006\001\002\000\030" +
    "\004\040\007\022\017\021\022\014\023\004\024\005\026" +
    "\020\032\013\033\010\034\015\035\006\001\002\000\034" +
    "\002\000\005\026\006\033\011\030\012\034\013\035\014" +
    "\027\015\032\016\036\020\025\021\037\022\031\023\024" +
    "\001\002\000\030\004\040\007\022\017\021\022\014\023" +
    "\004\024\005\026\020\032\013\033\010\034\015\035\006" +
    "\001\002\000\030\004\040\007\022\017\021\022\014\023" +
    "\004\024\005\026\020\032\013\033\010\034\015\035\006" +
    "\001\002\000\030\004\040\007\022\017\021\022\014\023" +
    "\004\024\005\026\020\032\013\033\010\034\015\035\006" +
    "\001\002\000\030\004\040\007\022\017\021\022\014\023" +
    "\004\024\005\026\020\032\013\033\010\034\015\035\006" +
    "\001\002\000\030\004\040\007\022\017\021\022\014\023" +
    "\004\024\005\026\020\032\013\033\010\034\015\035\006" +
    "\001\002\000\030\004\040\007\022\017\021\022\014\023" +
    "\004\024\005\026\020\032\013\033\010\034\015\035\006" +
    "\001\002\000\030\004\040\007\022\017\021\022\014\023" +
    "\004\024\005\026\020\032\013\033\010\034\015\035\006" +
    "\001\002\000\030\004\040\007\022\017\021\022\014\023" +
    "\004\024\005\026\020\032\013\033\010\034\015\035\006" +
    "\001\002\000\030\004\040\007\022\017\021\022\014\023" +
    "\004\024\005\026\020\032\013\033\010\034\015\035\006" +
    "\001\002\000\030\004\040\007\022\017\021\022\014\023" +
    "\004\024\005\026\020\032\013\033\010\034\015\035\006" +
    "\001\002\000\030\004\040\007\022\017\021\022\014\023" +
    "\004\024\005\026\020\032\013\033\010\034\015\035\006" +
    "\001\002\000\030\004\040\007\022\017\021\022\014\023" +
    "\004\024\005\026\020\032\013\033\010\034\015\035\006" +
    "\001\002\000\070\002\ufffe\004\ufffe\005\ufffe\006\ufffe\007" +
    "\ufffe\010\ufffe\011\ufffe\012\ufffe\013\ufffe\014\ufffe\015\ufffe" +
    "\016\ufffe\017\ufffe\020\ufffe\021\ufffe\022\ufffe\023\ufffe\024" +
    "\ufffe\025\ufffe\026\ufffe\027\ufffe\030\ufffe\031\ufffe\032\ufffe" +
    "\033\ufffe\034\ufffe\035\ufffe\001\002\000\070\002\uffe8\004" +
    "\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8" +
    "\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021" +
    "\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8" +
    "\030\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\001" +
    "\002\000\070\002\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb" +
    "\010\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016" +
    "\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb" +
    "\025\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033" +
    "\uffeb\034\uffeb\035\uffeb\001\002\000\070\002\uffee\004\uffee" +
    "\005\uffee\006\uffee\007\uffee\010\uffee\011\uffee\012\uffee\013" +
    "\uffee\014\uffee\015\uffee\016\uffee\017\uffee\020\uffee\021\uffee" +
    "\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030" +
    "\uffee\031\uffee\032\uffee\033\uffee\034\uffee\035\uffee\001\002" +
    "\000\070\002\uffef\004\uffef\005\uffef\006\uffef\007\uffef\010" +
    "\uffef\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef\016\uffef" +
    "\017\uffef\020\uffef\021\uffef\022\uffef\023\uffef\024\uffef\025" +
    "\uffef\026\uffef\027\uffef\030\uffef\031\uffef\032\uffef\033\uffef" +
    "\034\uffef\035\uffef\001\002\000\070\002\ufff3\004\ufff3\005" +
    "\ufff3\006\ufff3\007\ufff3\010\ufff3\011\030\012\034\013\035" +
    "\014\027\015\032\016\036\017\ufff3\020\025\021\037\022" +
    "\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3" +
    "\031\ufff3\032\ufff3\033\ufff3\034\ufff3\035\ufff3\001\002\000" +
    "\070\002\uffec\004\uffec\005\uffec\006\uffec\007\uffec\010\uffec" +
    "\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec\016\uffec\017" +
    "\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec\025\uffec" +
    "\026\uffec\027\uffec\030\uffec\031\uffec\032\uffec\033\uffec\034" +
    "\uffec\035\uffec\001\002\000\070\002\ufff2\004\ufff2\005\026" +
    "\006\033\007\ufff2\010\ufff2\011\030\012\034\013\035\014" +
    "\027\015\032\016\036\017\ufff2\020\025\021\037\022\ufff2" +
    "\023\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2\031" +
    "\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2\001\002\000\070" +
    "\002\ufff0\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011" +
    "\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0" +
    "\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026" +
    "\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0" +
    "\035\ufff0\001\002\000\070\002\uffed\004\uffed\005\uffed\006" +
    "\uffed\007\uffed\010\uffed\011\uffed\012\uffed\013\uffed\014\uffed" +
    "\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022\uffed\023" +
    "\uffed\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed\031\uffed" +
    "\032\uffed\033\uffed\034\uffed\035\uffed\001\002\000\070\002" +
    "\ufff4\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\030" +
    "\012\034\013\035\014\027\015\032\016\036\017\ufff4\020" +
    "\025\021\037\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4" +
    "\027\ufff4\030\ufff4\031\ufff4\032\ufff4\033\ufff4\034\ufff4\035" +
    "\ufff4\001\002\000\070\002\uffe9\004\uffe9\005\uffe9\006\uffe9" +
    "\007\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015" +
    "\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9" +
    "\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032" +
    "\uffe9\033\uffe9\034\uffe9\035\uffe9\001\002\000\070\002\ufff1" +
    "\004\ufff1\005\026\006\033\007\ufff1\010\ufff1\011\030\012" +
    "\034\013\035\014\027\015\032\016\036\017\ufff1\020\025" +
    "\021\037\022\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1\027" +
    "\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1" +
    "\001\002\000\034\005\026\006\033\010\056\011\030\012" +
    "\034\013\035\014\027\015\032\016\036\020\025\021\037" +
    "\022\031\023\024\001\002\000\070\002\ufff5\004\ufff5\005" +
    "\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5" +
    "\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\022" +
    "\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5" +
    "\031\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5\001\002\000" +
    "\070\002\uffea\004\uffea\005\026\006\033\007\uffea\010\uffea" +
    "\011\030\012\034\013\035\014\027\015\032\016\036\017" +
    "\uffea\020\025\021\037\022\031\023\024\024\uffea\025\uffea" +
    "\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033\uffea\034" +
    "\uffea\035\uffea\001\002\000\070\002\uffe3\004\uffe3\005\uffe3" +
    "\006\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014" +
    "\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3" +
    "\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031" +
    "\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\001\002\000\006" +
    "\027\064\031\063\001\002\000\036\005\026\006\033\011" +
    "\030\012\034\013\035\014\027\015\032\016\036\020\025" +
    "\021\037\022\031\023\024\027\uffe1\031\uffe1\001\002\000" +
    "\030\004\040\007\022\017\021\022\014\023\004\024\005" +
    "\026\020\032\013\033\010\034\015\035\006\001\002\000" +
    "\070\002\uffe2\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2" +
    "\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017" +
    "\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2" +
    "\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034" +
    "\uffe2\035\uffe2\001\002\000\036\005\026\006\033\011\030" +
    "\012\034\013\035\014\027\015\032\016\036\020\025\021" +
    "\037\022\031\023\024\027\uffe0\031\uffe0\001\002\000\032" +
    "\002\uffdf\004\040\007\022\017\021\022\014\023\004\024" +
    "\070\026\020\032\013\033\010\034\015\035\006\001\002" +
    "\000\056\002\uffde\004\uffde\005\026\006\033\007\uffde\011" +
    "\030\012\034\013\035\014\027\015\032\016\036\017\uffde" +
    "\020\025\021\037\022\031\023\024\024\uffde\026\uffde\032" +
    "\uffde\033\uffde\034\uffde\035\uffde\001\002\000\032\004\040" +
    "\007\022\017\021\022\014\023\004\024\005\025\073\026" +
    "\020\032\013\033\010\034\015\035\006\001\002\000\056" +
    "\002\uffdc\004\uffdc\005\026\006\033\007\uffdc\011\030\012" +
    "\034\013\035\014\027\015\032\016\036\017\uffdc\020\025" +
    "\021\037\022\031\023\024\024\uffdc\026\uffdc\032\uffdc\033" +
    "\uffdc\034\uffdc\035\uffdc\001\002\000\006\025\101\031\100" +
    "\001\002\000\070\002\uffe7\004\uffe7\005\uffe7\006\uffe7\007" +
    "\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7" +
    "\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024" +
    "\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7" +
    "\033\uffe7\034\uffe7\035\uffe7\001\002\000\036\005\026\006" +
    "\033\011\030\012\034\013\035\014\027\015\032\016\036" +
    "\020\025\021\037\022\031\023\024\025\076\030\075\001" +
    "\002\000\030\004\040\007\022\017\021\022\014\023\004" +
    "\024\005\026\020\032\013\033\010\034\015\035\006\001" +
    "\002\000\032\002\uffdd\004\uffdd\007\uffdd\017\uffdd\022\uffdd" +
    "\023\uffdd\024\uffdd\026\uffdd\032\uffdd\033\uffdd\034\uffdd\035" +
    "\uffdd\001\002\000\036\005\026\006\033\011\030\012\034" +
    "\013\035\014\027\015\032\016\036\020\025\021\037\022" +
    "\031\023\024\025\uffe5\031\uffe5\001\002\000\030\004\040" +
    "\007\022\017\021\022\014\023\004\024\005\026\020\032" +
    "\013\033\010\034\015\035\006\001\002\000\070\002\uffe6" +
    "\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012" +
    "\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6" +
    "\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027" +
    "\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6" +
    "\001\002\000\034\005\026\006\033\011\030\012\034\013" +
    "\035\014\027\015\032\016\036\020\025\021\037\022\031" +
    "\023\024\030\103\001\002\000\030\004\040\007\022\017" +
    "\021\022\014\023\004\024\005\026\020\032\013\033\010" +
    "\034\015\035\006\001\002\000\036\005\026\006\033\011" +
    "\030\012\034\013\035\014\027\015\032\016\036\020\025" +
    "\021\037\022\031\023\024\025\uffe4\031\uffe4\001\002\000" +
    "\070\002\ufff6\004\ufff6\005\026\006\033\007\ufff6\010\ufff6" +
    "\011\030\012\034\013\035\014\027\015\032\016\036\017" +
    "\ufff6\020\025\021\037\022\ufff6\023\ufff6\024\ufff6\025\ufff6" +
    "\026\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6\033\ufff6\034" +
    "\ufff6\035\ufff6\001\002\000\004\002\001\001\002\000\034" +
    "\005\026\006\033\011\030\012\034\013\035\014\027\015" +
    "\032\016\036\020\025\021\037\022\031\023\024\030\075" +
    "\001\002\000\070\002\ufff7\004\ufff7\005\026\006\033\007" +
    "\ufff7\010\ufff7\011\030\012\034\013\035\014\027\015\032" +
    "\016\036\017\ufff7\020\025\021\037\022\ufff7\023\ufff7\024" +
    "\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7" +
    "\033\ufff7\034\ufff7\035\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\106\000\014\002\011\003\022\004\010\005\006\010" +
    "\016\001\001\000\010\003\107\004\010\005\006\001\001" +
    "\000\012\003\106\004\010\005\006\007\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\104\004\010\005\006\001\001\000\002\001\001\000\012" +
    "\003\066\004\010\005\006\011\065\001\001\000\002\001" +
    "\001\000\012\003\061\004\010\005\006\006\060\001\001" +
    "\000\010\003\056\004\010\005\006\001\001\000\010\003" +
    "\054\004\010\005\006\001\001\000\002\001\001\000\010" +
    "\003\053\004\010\005\006\001\001\000\010\003\052\004" +
    "\010\005\006\001\001\000\010\003\051\004\010\005\006" +
    "\001\001\000\010\003\050\004\010\005\006\001\001\000" +
    "\010\003\047\004\010\005\006\001\001\000\010\003\046" +
    "\004\010\005\006\001\001\000\010\003\045\004\010\005" +
    "\006\001\001\000\010\003\044\004\010\005\006\001\001" +
    "\000\010\003\043\004\010\005\006\001\001\000\010\003" +
    "\042\004\010\005\006\001\001\000\010\003\041\004\010" +
    "\005\006\001\001\000\010\003\040\004\010\005\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\064\004\010\005\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\003\070\004\010\005\006\001" +
    "\001\000\002\001\001\000\012\003\073\004\010\005\006" +
    "\007\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\076\004\010" +
    "\005\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\101\004\010\005\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\003\103\004\010\005\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$JSONQLParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$JSONQLParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$JSONQLParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public void syntax_error(Symbol currentToken) {
		report_error("Syntax error at [" + (currentToken.left+1) +"," + (currentToken.right+1) +"]", null);
	}

	public static Symbol parse(Reader input) throws Exception {
		return (new JSONQLParser(new JSONQLLexer(input))).parse();
	}

	public static void main(String[] args) throws Exception {
		if (args.length < 1) {
			System.out.println(parse(new InputStreamReader(System.in, "UTF8")).value);
		} else for (int i = 0; i < args.length; ++i) {
			System.out.println(parse(new InputStreamReader(new FileInputStream(args[i]), "UTF8")).value);
		}
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$JSONQLParser$actions {
  private final JSONQLParser parser;

  /** Constructor */
  CUP$JSONQLParser$actions(JSONQLParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$JSONQLParser$do_action_part00000000(
    int                        CUP$JSONQLParser$act_num,
    java_cup.runtime.lr_parser CUP$JSONQLParser$parser,
    java.util.Stack            CUP$JSONQLParser$stack,
    int                        CUP$JSONQLParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$JSONQLParser$result;

      /* select the action based on the action number */
      switch (CUP$JSONQLParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).right;
		JSONQLExpression start_val = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).value;
		RESULT = start_val;
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$JSONQLParser$parser.done_parsing();
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= EXP 
            {
              JSONQLExpression RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression op = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = op; 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= INDIZ 
            {
              JSONQLExpression RESULT =null;
		int indleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int indright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLMemberExpression ind = (JSONQLMemberExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = ind; 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // EXP ::= ROOT 
            {
              JSONQLExpression RESULT =null;
		 RESULT = JSONQLRoot.ROOT; 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // EXP ::= BOOL 
            {
              JSONQLExpression RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = new JSONQLLiteral(b); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // EXP ::= NUMBER 
            {
              JSONQLExpression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = new JSONQLLiteral(n); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // EXP ::= STRING 
            {
              JSONQLExpression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = new JSONQLLiteral(s); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // EXP ::= NULL 
            {
              JSONQLExpression RESULT =null;
		RESULT = new JSONQLLiteral(null); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // EXP ::= OBJECT 
            {
              JSONQLExpression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLObjectExpression o = (JSONQLObjectExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = o; 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // EXP ::= ARRAY 
            {
              JSONQLExpression RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLArrayExpression a = (JSONQLArrayExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = a; 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // EXP ::= MINUS EXP 
            {
              JSONQLExpression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression n = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = new JSONQLUnaryExpression("-",n); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // EXP ::= PLUS EXP 
            {
              JSONQLExpression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression n = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = new JSONQLUnaryExpression("+",n); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // EXP ::= LPARENT EXP RPARENT 
            {
              JSONQLExpression RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).right;
		JSONQLExpression r = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).value;
		 RESULT = r; 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EXP ::= EXP MULT EXP 
            {
              JSONQLExpression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).right;
		JSONQLExpression l = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression r = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = new JSONQLBinaryExpression("*",l,r); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EXP ::= EXP DIV EXP 
            {
              JSONQLExpression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).right;
		JSONQLExpression l = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression r = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = new JSONQLBinaryExpression("/",l,r); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EXP ::= EXP PLUS EXP 
            {
              JSONQLExpression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).right;
		JSONQLExpression l = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression r = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = new JSONQLBinaryExpression("+",l,r); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EXP ::= EXP MINUS EXP 
            {
              JSONQLExpression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).right;
		JSONQLExpression l = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression r = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = new JSONQLBinaryExpression("-",l,r); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EXP ::= EXP EQUAL EXP 
            {
              JSONQLExpression RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).right;
		JSONQLExpression n1 = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression n2 = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = new JSONQLBinaryExpression("==",n1,n2); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EXP ::= EXP NOT_EQUAL EXP 
            {
              JSONQLExpression RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).right;
		JSONQLExpression n1 = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression n2 = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = new JSONQLBinaryExpression("!=",n1,n2); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXP ::= EXP LESS EXP 
            {
              JSONQLExpression RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).right;
		JSONQLExpression n1 = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression n2 = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = new JSONQLBinaryExpression("<",n1,n2); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXP ::= EXP GREATER EXP 
            {
              JSONQLExpression RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).right;
		JSONQLExpression n1 = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression n2 = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = new JSONQLBinaryExpression(">",n1,n2); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXP ::= EXP LESS_EQUAL EXP 
            {
              JSONQLExpression RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).right;
		JSONQLExpression n1 = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression n2 = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = new JSONQLBinaryExpression("<=",n1,n2); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXP ::= EXP GREATER_EQUAL EXP 
            {
              JSONQLExpression RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).right;
		JSONQLExpression n1 = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression n2 = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = new JSONQLBinaryExpression(">=",n1,n2); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXP ::= NOT EXP 
            {
              JSONQLExpression RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression b = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = new JSONQLUnaryExpression("!",b); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXP ::= EXP AND EXP 
            {
              JSONQLExpression RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).right;
		JSONQLExpression n1 = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression n2 = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = new JSONQLBinaryExpression("&&",n1,n2); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXP ::= EXP OR EXP 
            {
              JSONQLExpression RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).right;
		JSONQLExpression n1 = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression n2 = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = new JSONQLBinaryExpression("||",n1,n2); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OBJECT ::= LBRACE RBRACE 
            {
              JSONQLObjectExpression RESULT =null;
		 Map<JSONQLExpression, JSONQLExpression> a = new HashMap(); RESULT = new JSONQLObjectExpression(a); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("OBJECT",2, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OBJECT ::= LBRACE PAIRS RBRACE 
            {
              JSONQLObjectExpression RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).right;
		Map<JSONQLExpression,JSONQLExpression> p = (Map<JSONQLExpression,JSONQLExpression>)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).value;
		 RESULT = new JSONQLObjectExpression(p); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("OBJECT",2, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // PAIRS ::= EXP COLON EXP 
            {
              Map<JSONQLExpression,JSONQLExpression> RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).right;
		JSONQLExpression k = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression v = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = new HashMap<JSONQLExpression,JSONQLExpression>(); RESULT.put(k,v); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("PAIRS",5, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PAIRS ::= PAIRS COMMA EXP COLON EXP 
            {
              Map<JSONQLExpression,JSONQLExpression> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-4)).right;
		Map<JSONQLExpression,JSONQLExpression> p = (Map<JSONQLExpression,JSONQLExpression>)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-4)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).right;
		JSONQLExpression k = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression v = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 p.put(k,v); RESULT = p; 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("PAIRS",5, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-4)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ARRAY ::= LBRACK RBRACK 
            {
              JSONQLArrayExpression RESULT =null;
		 JSONQLArrayExpression a = new JSONQLArrayExpression(); RESULT = a; 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("ARRAY",3, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ARRAY ::= LBRACK VALUES RBRACK 
            {
              JSONQLArrayExpression RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).right;
		List<JSONQLExpression> v = (List<JSONQLExpression>)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).value;
		 RESULT = new JSONQLArrayExpression(v);
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("ARRAY",3, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VALUES ::= EXP 
            {
              List<JSONQLExpression> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression v = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 List<JSONQLExpression> a = List.of(v); RESULT = a; 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("VALUES",4, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // VALUES ::= VALUES COMMA EXP 
            {
              List<JSONQLExpression> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).right;
		List<JSONQLExpression> a = (List<JSONQLExpression>)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression v = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 a.add(v); RESULT=a; 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("VALUES",4, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // INDIZ ::= ROOT MEM_VALUES 
            {
              JSONQLMemberExpression RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		List<JSONQLExpression> e = (List<JSONQLExpression>)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 JSONQLExpression root = new JSONQLLiteral("$"); RESULT = new JSONQLMemberExpression(root, e); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("INDIZ",6, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // MEM_VALUES ::= EXP 
            {
              List<JSONQLExpression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression e = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 List<JSONQLExpression> a = List.of(e); RESULT = a; 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("MEM_VALUES",7, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // MEM_VALUES ::= MEM_VALUES LBRACE EXP RBRACE 
            {
              List<JSONQLExpression> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-3)).right;
		List<JSONQLExpression> e1 = (List<JSONQLExpression>)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).right;
		JSONQLExpression e2 = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).value;
		 e1.add(e2); RESULT = e1; 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("MEM_VALUES",7, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-3)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // MEM_VALUES ::= MEM_VALUES EXP 
            {
              List<JSONQLExpression> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).right;
		List<JSONQLExpression> e1 = (List<JSONQLExpression>)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression e2 = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 e1.add(e2); RESULT = e1; 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("MEM_VALUES",7, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$JSONQLParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$JSONQLParser$do_action(
    int                        CUP$JSONQLParser$act_num,
    java_cup.runtime.lr_parser CUP$JSONQLParser$parser,
    java.util.Stack            CUP$JSONQLParser$stack,
    int                        CUP$JSONQLParser$top)
    throws java.lang.Exception
    {
              return CUP$JSONQLParser$do_action_part00000000(
                               CUP$JSONQLParser$act_num,
                               CUP$JSONQLParser$parser,
                               CUP$JSONQLParser$stack,
                               CUP$JSONQLParser$top);
    }
}

}
