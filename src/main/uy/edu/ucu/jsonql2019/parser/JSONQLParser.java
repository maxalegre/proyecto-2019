
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package uy.edu.ucu.jsonql2019.parser;

import uy.edu.ucu.jsonql2019.ast.*;
import java.io.*;
import java.util.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class JSONQLParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return JSONQLTokens.class;
}

  /** Default constructor. */
  @Deprecated
  public JSONQLParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public JSONQLParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public JSONQLParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\070\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\004\000\002\003\004\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\004\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\005\004\000\002\005\005\000\002\013\005\000" +
    "\002\013\007\000\002\006\004\000\002\006\005\000\002" +
    "\007\003\000\002\007\005\000\002\004\015\000\002\004" +
    "\014\000\002\004\010\000\002\014\004\000\002\010\004" +
    "\000\002\010\005\000\002\010\005\000\002\010\006\000" +
    "\002\011\003\000\002\011\005\000\002\012\003\000\002" +
    "\012\003\000\002\012\005\000\002\012\004\000\002\012" +
    "\004\000\002\015\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\177\000\036\004\004\007\020\020\011\023\005\024" +
    "\023\025\013\027\010\033\027\042\024\046\021\047\017" +
    "\050\025\051\026\052\014\001\002\000\054\002\ufffc\005" +
    "\ufffc\006\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc" +
    "\017\ufffc\021\ufffc\022\ufffc\023\ufffc\024\ufffc\027\157\030" +
    "\ufffc\031\ufffc\032\ufffc\034\ufffc\035\ufffc\036\ufffc\041\160" +
    "\001\002\000\032\004\034\007\036\020\011\023\005\024" +
    "\023\025\013\027\035\033\027\046\021\047\017\050\025" +
    "\051\026\001\002\000\004\002\uffff\001\002\000\004\002" +
    "\154\001\002\000\034\004\034\007\036\020\011\023\005" +
    "\024\023\025\013\027\035\030\105\033\027\046\021\047" +
    "\017\050\025\051\026\001\002\000\032\004\034\007\036" +
    "\020\011\023\005\024\023\025\013\027\035\033\027\046" +
    "\021\047\017\050\025\051\026\001\002\000\004\002\ufffd" +
    "\001\002\000\034\004\034\007\036\020\011\023\005\024" +
    "\023\025\013\026\134\027\035\033\027\046\021\047\017" +
    "\050\025\051\026\001\002\000\004\007\126\001\002\000" +
    "\042\002\000\005\044\006\051\012\046\013\052\014\053" +
    "\015\045\016\050\017\054\021\041\022\057\023\047\024" +
    "\042\034\056\035\055\036\040\001\002\000\056\002\ufff7" +
    "\005\ufff7\006\ufff7\010\ufff7\012\ufff7\013\ufff7\014\ufff7\015" +
    "\ufff7\016\ufff7\017\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7" +
    "\026\ufff7\030\ufff7\031\ufff7\032\ufff7\034\ufff7\035\ufff7\036" +
    "\ufff7\044\ufff7\001\002\000\056\002\ufff9\005\ufff9\006\ufff9" +
    "\010\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9\016\ufff9\017" +
    "\ufff9\021\ufff9\022\ufff9\023\ufff9\024\ufff9\026\ufff9\030\ufff9" +
    "\031\ufff9\032\ufff9\034\ufff9\035\ufff9\036\ufff9\044\ufff9\001" +
    "\002\000\032\004\034\007\036\020\011\023\005\024\023" +
    "\025\013\027\035\033\027\046\021\047\017\050\025\051" +
    "\026\001\002\000\056\002\ufffa\005\ufffa\006\ufffa\010\ufffa" +
    "\012\ufffa\013\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa\021" +
    "\ufffa\022\ufffa\023\ufffa\024\ufffa\026\ufffa\030\ufffa\031\ufffa" +
    "\032\ufffa\034\ufffa\035\ufffa\036\ufffa\044\ufffa\001\002\000" +
    "\004\002\ufffe\001\002\000\032\004\034\007\036\020\011" +
    "\023\005\024\023\025\013\027\035\033\027\046\021\047" +
    "\017\050\025\051\026\001\002\000\004\052\031\001\002" +
    "\000\056\002\ufff5\005\ufff5\006\ufff5\010\ufff5\012\ufff5\013" +
    "\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\021\ufff5\022\ufff5" +
    "\023\ufff5\024\ufff5\026\ufff5\030\ufff5\031\ufff5\032\ufff5\034" +
    "\ufff5\035\ufff5\036\ufff5\044\ufff5\001\002\000\056\002\ufffb" +
    "\005\ufffb\006\ufffb\010\ufffb\012\ufffb\013\ufffb\014\ufffb\015" +
    "\ufffb\016\ufffb\017\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb" +
    "\026\ufffb\030\ufffb\031\ufffb\032\ufffb\034\ufffb\035\ufffb\036" +
    "\ufffb\044\ufffb\001\002\000\056\002\ufff8\005\ufff8\006\ufff8" +
    "\010\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8\016\ufff8\017" +
    "\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\026\ufff8\030\ufff8" +
    "\031\ufff8\032\ufff8\034\ufff8\035\ufff8\036\ufff8\044\ufff8\001" +
    "\002\000\056\002\ufff6\005\ufff6\006\ufff6\010\ufff6\012\ufff6" +
    "\013\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\021\ufff6\022" +
    "\ufff6\023\ufff6\024\ufff6\026\ufff6\030\ufff6\031\ufff6\032\ufff6" +
    "\034\ufff6\035\ufff6\036\ufff6\044\ufff6\001\002\000\004\011" +
    "\032\001\002\000\004\007\033\001\002\000\032\004\034" +
    "\007\036\020\011\023\005\024\023\025\013\027\035\033" +
    "\027\046\021\047\017\050\025\051\026\001\002\000\056" +
    "\002\ufffc\005\ufffc\006\ufffc\010\ufffc\012\ufffc\013\ufffc\014" +
    "\ufffc\015\ufffc\016\ufffc\017\ufffc\021\ufffc\022\ufffc\023\ufffc" +
    "\024\ufffc\026\ufffc\030\ufffc\031\ufffc\032\ufffc\034\ufffc\035" +
    "\ufffc\036\ufffc\044\ufffc\001\002\000\034\004\034\007\036" +
    "\020\011\023\005\024\023\025\013\027\035\030\105\033" +
    "\027\046\021\047\017\050\025\051\026\001\002\000\032" +
    "\004\034\007\036\020\011\023\005\024\023\025\013\027" +
    "\035\033\027\046\021\047\017\050\025\051\026\001\002" +
    "\000\042\005\044\006\051\010\043\012\046\013\052\014" +
    "\053\015\045\016\050\017\054\021\041\022\057\023\047" +
    "\024\042\034\056\035\055\036\040\001\002\000\004\050" +
    "\102\001\002\000\032\004\034\007\036\020\011\023\005" +
    "\024\023\025\013\027\035\033\027\046\021\047\017\050" +
    "\025\051\026\001\002\000\032\004\034\007\036\020\011" +
    "\023\005\024\023\025\013\027\035\033\027\046\021\047" +
    "\017\050\025\051\026\001\002\000\004\043\074\001\002" +
    "\000\032\004\034\007\036\020\011\023\005\024\023\025" +
    "\013\027\035\033\027\046\021\047\017\050\025\051\026" +
    "\001\002\000\032\004\034\007\036\020\011\023\005\024" +
    "\023\025\013\027\035\033\027\046\021\047\017\050\025" +
    "\051\026\001\002\000\032\004\034\007\036\020\011\023" +
    "\005\024\023\025\013\027\035\033\027\046\021\047\017" +
    "\050\025\051\026\001\002\000\032\004\034\007\036\020" +
    "\011\023\005\024\023\025\013\027\035\033\027\046\021" +
    "\047\017\050\025\051\026\001\002\000\032\004\034\007" +
    "\036\020\011\023\005\024\023\025\013\027\035\033\027" +
    "\046\021\047\017\050\025\051\026\001\002\000\032\004" +
    "\034\007\036\020\011\023\005\024\023\025\013\027\035" +
    "\033\027\046\021\047\017\050\025\051\026\001\002\000" +
    "\032\004\034\007\036\020\011\023\005\024\023\025\013" +
    "\027\035\033\027\046\021\047\017\050\025\051\026\001" +
    "\002\000\032\004\034\007\036\020\011\023\005\024\023" +
    "\025\013\027\035\033\027\046\021\047\017\050\025\051" +
    "\026\001\002\000\032\004\034\007\036\020\011\023\005" +
    "\024\023\025\013\027\035\033\027\046\021\047\017\050" +
    "\025\051\026\001\002\000\004\050\062\001\002\000\004" +
    "\050\061\001\002\000\032\004\034\007\036\020\011\023" +
    "\005\024\023\025\013\027\035\033\027\046\021\047\017" +
    "\050\025\051\026\001\002\000\056\002\uffe2\005\uffe2\006" +
    "\uffe2\010\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2" +
    "\017\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\026\uffe2\030" +
    "\uffe2\031\uffe2\032\uffe2\034\056\035\055\036\040\044\uffe2" +
    "\001\002\000\056\002\uffe6\005\uffe6\006\uffe6\010\uffe6\012" +
    "\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\021\uffe6" +
    "\022\uffe6\023\uffe6\024\uffe6\026\uffe6\030\uffe6\031\uffe6\032" +
    "\uffe6\034\uffe6\035\uffe6\036\uffe6\044\uffe6\001\002\000\056" +
    "\002\uffe5\005\uffe5\006\uffe5\010\uffe5\012\uffe5\013\uffe5\014" +
    "\uffe5\015\uffe5\016\uffe5\017\uffe5\021\uffe5\022\uffe5\023\uffe5" +
    "\024\uffe5\026\uffe5\030\uffe5\031\uffe5\032\uffe5\034\uffe5\035" +
    "\uffe5\036\uffe5\044\uffe5\001\002\000\056\002\uffe8\005\uffe8" +
    "\006\uffe8\010\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016" +
    "\uffe8\017\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\026\uffe8" +
    "\030\uffe8\031\uffe8\032\uffe8\034\056\035\055\036\040\044" +
    "\uffe8\001\002\000\056\002\uffeb\005\uffeb\006\uffeb\010\uffeb" +
    "\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\021" +
    "\uffeb\022\uffeb\023\uffeb\024\uffeb\026\uffeb\030\uffeb\031\uffeb" +
    "\032\uffeb\034\056\035\055\036\040\044\uffeb\001\002\000" +
    "\056\002\uffec\005\uffec\006\uffec\010\uffec\012\uffec\013\uffec" +
    "\014\uffec\015\uffec\016\uffec\017\uffec\021\uffec\022\uffec\023" +
    "\uffec\024\uffec\026\uffec\030\uffec\031\uffec\032\uffec\034\056" +
    "\035\055\036\040\044\uffec\001\002\000\056\002\ufff0\005" +
    "\ufff0\006\ufff0\010\ufff0\012\046\013\052\014\053\015\045" +
    "\016\050\017\054\021\041\022\057\023\ufff0\024\ufff0\026" +
    "\ufff0\030\ufff0\031\ufff0\032\ufff0\034\056\035\055\036\040" +
    "\044\ufff0\001\002\000\056\002\uffe9\005\uffe9\006\uffe9\010" +
    "\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9" +
    "\021\uffe9\022\uffe9\023\uffe9\024\uffe9\026\uffe9\030\uffe9\031" +
    "\uffe9\032\uffe9\034\056\035\055\036\040\044\uffe9\001\002" +
    "\000\056\002\uffef\005\044\006\051\010\uffef\012\046\013" +
    "\052\014\053\015\045\016\050\017\054\021\041\022\057" +
    "\023\uffef\024\uffef\026\uffef\030\uffef\031\uffef\032\uffef\034" +
    "\056\035\055\036\040\044\uffef\001\002\000\056\002\uffed" +
    "\005\uffed\006\uffed\010\uffed\012\uffed\013\uffed\014\uffed\015" +
    "\uffed\016\uffed\017\uffed\021\uffed\022\uffed\023\uffed\024\uffed" +
    "\026\uffed\030\uffed\031\uffed\032\uffed\034\056\035\055\036" +
    "\040\044\uffed\001\002\000\056\002\uffea\005\uffea\006\uffea" +
    "\010\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017" +
    "\uffea\021\uffea\022\uffea\023\uffea\024\uffea\026\uffea\030\uffea" +
    "\031\uffea\032\uffea\034\056\035\055\036\040\044\uffea\001" +
    "\002\000\056\002\ufff1\005\ufff1\006\ufff1\010\ufff1\012\046" +
    "\013\052\014\053\015\045\016\050\017\054\021\041\022" +
    "\057\023\ufff1\024\ufff1\026\ufff1\030\ufff1\031\ufff1\032\ufff1" +
    "\034\056\035\055\036\040\044\ufff1\001\002\000\004\007" +
    "\075\001\002\000\032\004\034\007\036\020\011\023\005" +
    "\024\023\025\013\027\035\033\027\046\021\047\017\050" +
    "\025\051\026\001\002\000\042\005\044\006\051\010\077" +
    "\012\046\013\052\014\053\015\045\016\050\017\054\021" +
    "\041\022\057\023\047\024\042\034\056\035\055\036\040" +
    "\001\002\000\004\002\uffd8\001\002\000\056\002\uffee\005" +
    "\044\006\051\010\uffee\012\046\013\052\014\053\015\045" +
    "\016\050\017\054\021\041\022\057\023\uffee\024\uffee\026" +
    "\uffee\030\uffee\031\uffee\032\uffee\034\056\035\055\036\040" +
    "\044\uffee\001\002\000\056\002\uffe3\005\uffe3\006\uffe3\010" +
    "\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3" +
    "\021\uffe3\022\uffe3\023\uffe3\024\uffe3\026\uffe3\030\uffe3\031" +
    "\uffe3\032\uffe3\034\056\035\055\036\040\044\uffe3\001\002" +
    "\000\056\002\uffe4\005\uffe4\006\uffe4\010\uffe4\012\uffe4\013" +
    "\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\021\uffe4\022\uffe4" +
    "\023\uffe4\024\uffe4\026\uffe4\030\uffe4\031\uffe4\032\uffe4\034" +
    "\uffe4\035\uffe4\036\uffe4\044\uffe4\001\002\000\042\005\044" +
    "\006\051\010\104\012\046\013\052\014\053\015\045\016" +
    "\050\017\054\021\041\022\057\023\047\024\042\034\056" +
    "\035\055\036\040\001\002\000\056\002\ufff2\005\ufff2\006" +
    "\ufff2\010\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2" +
    "\017\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2\026\ufff2\030" +
    "\ufff2\031\ufff2\032\ufff2\034\ufff2\035\ufff2\036\ufff2\044\ufff2" +
    "\001\002\000\056\002\uffdd\005\uffdd\006\uffdd\010\uffdd\012" +
    "\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\021\uffdd" +
    "\022\uffdd\023\uffdd\024\uffdd\026\uffdd\030\uffdd\031\uffdd\032" +
    "\uffdd\034\uffdd\035\uffdd\036\uffdd\044\uffdd\001\002\000\006" +
    "\030\111\032\110\001\002\000\046\005\044\006\051\012" +
    "\046\013\052\014\053\015\045\016\050\017\054\021\041" +
    "\022\057\023\047\024\042\030\uffdb\032\uffdb\034\056\035" +
    "\055\036\040\044\uffdb\001\002\000\032\004\034\007\036" +
    "\020\011\023\005\024\023\025\013\027\035\033\027\046" +
    "\021\047\017\050\025\051\026\001\002\000\056\002\uffdc" +
    "\005\uffdc\006\uffdc\010\uffdc\012\uffdc\013\uffdc\014\uffdc\015" +
    "\uffdc\016\uffdc\017\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc" +
    "\026\uffdc\030\uffdc\031\uffdc\032\uffdc\034\uffdc\035\uffdc\036" +
    "\uffdc\044\uffdc\001\002\000\046\005\044\006\051\012\046" +
    "\013\052\014\053\015\045\016\050\017\054\021\041\022" +
    "\057\023\047\024\042\030\uffda\032\uffda\034\056\035\055" +
    "\036\040\044\uffda\001\002\000\056\002\ufff4\005\044\006" +
    "\051\010\ufff4\012\046\013\052\014\053\015\045\016\050" +
    "\017\054\021\041\022\057\023\ufff4\024\ufff4\026\ufff4\030" +
    "\ufff4\031\ufff4\032\ufff4\034\056\035\055\036\040\044\ufff4" +
    "\001\002\000\042\005\044\006\051\010\115\012\046\013" +
    "\052\014\053\015\045\016\050\017\054\021\041\022\057" +
    "\023\047\024\042\034\056\035\055\036\040\001\002\000" +
    "\044\002\ufff2\005\ufff2\006\ufff2\012\ufff2\013\ufff2\014\ufff2" +
    "\015\ufff2\016\ufff2\017\ufff2\021\ufff2\022\ufff2\023\ufff2\024" +
    "\ufff2\034\ufff2\035\ufff2\036\ufff2\037\116\001\002\000\004" +
    "\007\117\001\002\000\032\004\034\007\036\020\011\023" +
    "\005\024\023\025\013\027\035\033\027\046\021\047\017" +
    "\050\025\051\026\001\002\000\042\005\044\006\051\010" +
    "\121\012\046\013\052\014\053\015\045\016\050\017\054" +
    "\021\041\022\057\023\047\024\042\034\056\035\055\036" +
    "\040\001\002\000\004\040\122\001\002\000\004\007\123" +
    "\001\002\000\032\004\034\007\036\020\011\023\005\024" +
    "\023\025\013\027\035\033\027\046\021\047\017\050\025" +
    "\051\026\001\002\000\042\005\044\006\051\010\125\012" +
    "\046\013\052\014\053\015\045\016\050\017\054\021\041" +
    "\022\057\023\047\024\042\034\056\035\055\036\040\001" +
    "\002\000\004\002\uffd9\001\002\000\032\004\034\007\036" +
    "\020\011\023\005\024\023\025\013\027\035\033\027\046" +
    "\021\047\017\050\025\051\026\001\002\000\042\005\044" +
    "\006\051\012\046\013\052\014\053\015\045\016\050\017" +
    "\054\021\041\022\057\023\047\024\042\032\130\034\056" +
    "\035\055\036\040\001\002\000\032\004\034\007\036\020" +
    "\011\023\005\024\023\025\013\027\035\033\027\046\021" +
    "\047\017\050\025\051\026\001\002\000\042\005\044\006" +
    "\051\010\132\012\046\013\052\014\053\015\045\016\050" +
    "\017\054\021\041\022\057\023\047\024\042\034\056\035" +
    "\055\036\040\001\002\000\004\002\uffd7\001\002\000\006" +
    "\026\141\032\140\001\002\000\056\002\uffe1\005\uffe1\006" +
    "\uffe1\010\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1" +
    "\017\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\026\uffe1\030" +
    "\uffe1\031\uffe1\032\uffe1\034\uffe1\035\uffe1\036\uffe1\044\uffe1" +
    "\001\002\000\042\005\044\006\051\012\046\013\052\014" +
    "\053\015\045\016\050\017\054\021\041\022\057\023\047" +
    "\024\042\031\136\034\056\035\055\036\040\001\002\000" +
    "\032\004\034\007\036\020\011\023\005\024\023\025\013" +
    "\027\035\033\027\046\021\047\017\050\025\051\026\001" +
    "\002\000\044\005\044\006\051\012\046\013\052\014\053" +
    "\015\045\016\050\017\054\021\041\022\057\023\047\024" +
    "\042\026\uffdf\032\uffdf\034\056\035\055\036\040\001\002" +
    "\000\032\004\034\007\036\020\011\023\005\024\023\025" +
    "\013\027\035\033\027\046\021\047\017\050\025\051\026" +
    "\001\002\000\056\002\uffe0\005\uffe0\006\uffe0\010\uffe0\012" +
    "\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\021\uffe0" +
    "\022\uffe0\023\uffe0\024\uffe0\026\uffe0\030\uffe0\031\uffe0\032" +
    "\uffe0\034\uffe0\035\uffe0\036\uffe0\044\uffe0\001\002\000\042" +
    "\005\044\006\051\012\046\013\052\014\053\015\045\016" +
    "\050\017\054\021\041\022\057\023\047\024\042\031\143" +
    "\034\056\035\055\036\040\001\002\000\032\004\034\007" +
    "\036\020\011\023\005\024\023\025\013\027\035\033\027" +
    "\046\021\047\017\050\025\051\026\001\002\000\044\005" +
    "\044\006\051\012\046\013\052\014\053\015\045\016\050" +
    "\017\054\021\041\022\057\023\047\024\042\026\uffde\032" +
    "\uffde\034\056\035\055\036\040\001\002\000\056\002\uffe7" +
    "\005\044\006\051\010\uffe7\012\046\013\052\014\053\015" +
    "\045\016\050\017\054\021\041\022\057\023\047\024\042" +
    "\026\uffe7\030\uffe7\031\uffe7\032\uffe7\034\056\035\055\036" +
    "\040\044\uffe7\001\002\000\010\030\111\032\110\044\147" +
    "\001\002\000\004\052\150\001\002\000\004\045\151\001" +
    "\002\000\004\004\152\001\002\000\004\030\153\001\002" +
    "\000\004\002\uffca\001\002\000\004\002\001\001\002\000" +
    "\056\002\ufff3\005\044\006\051\010\ufff3\012\046\013\052" +
    "\014\053\015\045\016\050\017\054\021\041\022\057\023" +
    "\ufff3\024\ufff3\026\ufff3\030\ufff3\031\ufff3\032\ufff3\034\056" +
    "\035\055\036\040\044\ufff3\001\002\000\014\002\uffd6\027" +
    "\175\030\uffd6\032\uffd6\041\176\001\002\000\034\004\004" +
    "\007\036\020\011\023\005\024\023\025\013\027\035\031" +
    "\164\033\027\046\021\047\017\050\025\051\026\001\002" +
    "\000\004\052\161\001\002\000\014\002\uffd5\027\uffd5\030" +
    "\uffd5\032\uffd5\041\uffd5\001\002\000\006\030\172\032\173" +
    "\001\002\000\006\030\uffcf\032\uffcf\001\002\000\032\004" +
    "\034\007\036\020\011\023\005\024\023\025\013\027\035" +
    "\033\027\046\021\047\017\050\025\051\026\001\002\000" +
    "\046\005\044\006\051\012\046\013\052\014\053\015\045" +
    "\016\050\017\054\021\041\022\057\023\047\024\042\030" +
    "\uffce\031\167\032\uffce\034\056\035\055\036\040\001\002" +
    "\000\006\030\uffd1\032\uffd1\001\002\000\036\004\034\007" +
    "\036\020\011\023\005\024\023\025\013\027\035\030\uffcc" +
    "\032\uffcc\033\027\046\021\047\017\050\025\051\026\001" +
    "\002\000\044\005\044\006\051\012\046\013\052\014\053" +
    "\015\045\016\050\017\054\021\041\022\057\023\047\024" +
    "\042\030\uffcd\032\uffcd\034\056\035\055\036\040\001\002" +
    "\000\044\005\044\006\051\012\046\013\052\014\053\015" +
    "\045\016\050\017\054\021\041\022\057\023\047\024\042" +
    "\030\uffcb\032\uffcb\034\056\035\055\036\040\001\002\000" +
    "\014\002\uffd3\027\uffd3\030\uffd3\032\uffd3\041\uffd3\001\002" +
    "\000\034\004\004\007\036\020\011\023\005\024\023\025" +
    "\013\027\035\031\164\033\027\046\021\047\017\050\025" +
    "\051\026\001\002\000\006\030\uffd0\032\uffd0\001\002\000" +
    "\034\004\004\007\036\020\011\023\005\024\023\025\013" +
    "\027\035\031\164\033\027\046\021\047\017\050\025\051" +
    "\026\001\002\000\004\052\177\001\002\000\014\002\uffd4" +
    "\027\uffd4\030\uffd4\032\uffd4\041\uffd4\001\002\000\006\030" +
    "\201\032\173\001\002\000\014\002\uffd2\027\uffd2\030\uffd2" +
    "\032\uffd2\041\uffd2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\177\000\020\002\006\003\014\004\021\005\015\006" +
    "\027\014\005\015\011\001\001\000\004\010\155\001\001" +
    "\000\010\003\154\005\015\006\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\003\106\005\015\006\027" +
    "\007\145\001\001\000\010\003\144\005\015\006\027\001" +
    "\001\000\002\001\001\000\012\003\134\005\015\006\027" +
    "\013\132\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\113\005\015" +
    "\006\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\112\005\015\006\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\003\036\005\015\006\027\001\001\000\002\001\001\000" +
    "\012\003\106\005\015\006\027\007\105\001\001\000\010" +
    "\003\102\005\015\006\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\100\005\015\006\027\001\001" +
    "\000\010\003\077\005\015\006\027\001\001\000\002\001" +
    "\001\000\010\003\072\005\015\006\027\001\001\000\010" +
    "\003\071\005\015\006\027\001\001\000\010\003\070\005" +
    "\015\006\027\001\001\000\010\003\067\005\015\006\027" +
    "\001\001\000\010\003\066\005\015\006\027\001\001\000" +
    "\010\003\065\005\015\006\027\001\001\000\010\003\064" +
    "\005\015\006\027\001\001\000\010\003\063\005\015\006" +
    "\027\001\001\000\010\003\062\005\015\006\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\057\005" +
    "\015\006\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\003\075\005\015\006\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\111\005\015\006\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\003\117\005\015\006\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\123\005\015" +
    "\006\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\126\005\015\006\027\001\001\000\002\001\001" +
    "\000\010\003\130\005\015\006\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\003\136\005\015\006\027\001" +
    "\001\000\002\001\001\000\010\003\141\005\015\006\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\143\005\015\006\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\003\164\005\015\006\027\011\161\012\165\014\162" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\003\170\005\015\006\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\167\005\015\006\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\164\005\015\006" +
    "\027\012\173\014\162\001\001\000\002\001\001\000\016" +
    "\003\164\005\015\006\027\011\177\012\165\014\162\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$JSONQLParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$JSONQLParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$JSONQLParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public void syntax_error(Symbol currentToken) {
		report_error("Syntax error at [" + (currentToken.left+1) +"," + (currentToken.right+1) +"]", null);
	}

	public static Symbol parse(Reader input) throws Exception {
		return (new JSONQLParser(new JSONQLLexer(input))).parse();
	}

	public static void main(String[] args) throws Exception {
		if (args.length < 1) {
			System.out.println(parse(new InputStreamReader(System.in, "UTF8")).value);
		} else for (int i = 0; i < args.length; ++i) {
			System.out.println(parse(new InputStreamReader(new FileInputStream(args[i]), "UTF8")).value);
		}
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$JSONQLParser$actions {
  private final JSONQLParser parser;

  /** Constructor */
  CUP$JSONQLParser$actions(JSONQLParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$JSONQLParser$do_action_part00000000(
    int                        CUP$JSONQLParser$act_num,
    java_cup.runtime.lr_parser CUP$JSONQLParser$parser,
    java.util.Stack            CUP$JSONQLParser$stack,
    int                        CUP$JSONQLParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$JSONQLParser$result;

      /* select the action based on the action number */
      switch (CUP$JSONQLParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).right;
		JSONQLExpression start_val = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).value;
		RESULT = start_val;
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$JSONQLParser$parser.done_parsing();
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= EXP 
            {
              JSONQLExpression RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression op = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = op; 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= INDIZ 
            {
              JSONQLExpression RESULT =null;
		int indleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int indright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLMemberExpression ind = (JSONQLMemberExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = ind; 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= C 
            {
              JSONQLExpression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression s = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT=s; 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S ::= ACOMP 
            {
              JSONQLExpression RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLArrayComprehension a = (JSONQLArrayComprehension)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT=a; 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // EXP ::= ROOT 
            {
              JSONQLExpression RESULT =null;
		 RESULT = JSONQLRoot.ROOT; 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // EXP ::= BOOL 
            {
              JSONQLExpression RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = new JSONQLLiteral(b); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // EXP ::= NUMBER 
            {
              JSONQLExpression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = new JSONQLLiteral(n); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // EXP ::= STRING 
            {
              JSONQLExpression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = new JSONQLLiteral(s); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // EXP ::= NULL 
            {
              JSONQLExpression RESULT =null;
		RESULT = new JSONQLLiteral(null); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // EXP ::= OBJECT 
            {
              JSONQLExpression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLObjectExpression o = (JSONQLObjectExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = o; 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // EXP ::= ARRAY 
            {
              JSONQLExpression RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLArrayExpression a = (JSONQLArrayExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = a; 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // EXP ::= REGEX 
            {
              JSONQLExpression RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		String re = (String)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT= new JSONQLLiteral(re); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EXP ::= MINUS EXP 
            {
              JSONQLExpression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression n = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = new JSONQLUnaryExpression("-",n); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EXP ::= PLUS EXP 
            {
              JSONQLExpression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression n = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = new JSONQLUnaryExpression("+",n); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EXP ::= LPARENT EXP RPARENT 
            {
              JSONQLExpression RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).right;
		JSONQLExpression r = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).value;
		 RESULT = r; 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EXP ::= EXP MULT EXP 
            {
              JSONQLExpression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).right;
		JSONQLExpression l = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression r = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = new JSONQLBinaryExpression("*",l,r); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EXP ::= EXP DIV EXP 
            {
              JSONQLExpression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).right;
		JSONQLExpression l = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression r = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = new JSONQLBinaryExpression("/",l,r); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EXP ::= EXP PLUS EXP 
            {
              JSONQLExpression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).right;
		JSONQLExpression l = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression r = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = new JSONQLBinaryExpression("+",l,r); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXP ::= EXP MINUS EXP 
            {
              JSONQLExpression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).right;
		JSONQLExpression l = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression r = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = new JSONQLBinaryExpression("-",l,r); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXP ::= EXP EQUAL EXP 
            {
              JSONQLExpression RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).right;
		JSONQLExpression n1 = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression n2 = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = new JSONQLBinaryExpression("==",n1,n2); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXP ::= EXP NOT_EQUAL EXP 
            {
              JSONQLExpression RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).right;
		JSONQLExpression n1 = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression n2 = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = new JSONQLBinaryExpression("!=",n1,n2); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXP ::= EXP LESS EXP 
            {
              JSONQLExpression RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).right;
		JSONQLExpression n1 = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression n2 = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = new JSONQLBinaryExpression("<",n1,n2); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXP ::= EXP GREATER EXP 
            {
              JSONQLExpression RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).right;
		JSONQLExpression n1 = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression n2 = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = new JSONQLBinaryExpression(">",n1,n2); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXP ::= EXP LESS_EQUAL EXP 
            {
              JSONQLExpression RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).right;
		JSONQLExpression n1 = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression n2 = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = new JSONQLBinaryExpression("<=",n1,n2); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXP ::= EXP GREATER_EQUAL EXP 
            {
              JSONQLExpression RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).right;
		JSONQLExpression n1 = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression n2 = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = new JSONQLBinaryExpression(">=",n1,n2); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXP ::= NOT EXP 
            {
              JSONQLExpression RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression b = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = new JSONQLUnaryExpression("!",b); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXP ::= EXP ENC REGEX 
            {
              JSONQLExpression RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).right;
		JSONQLExpression b = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		String re = (String)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = new JSONQLBinaryExpression("~",b,new JSONQLLiteral(re)); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXP ::= EXP ENCA REGEX 
            {
              JSONQLExpression RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).right;
		JSONQLExpression b = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		String re = (String)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = new JSONQLBinaryExpression("~=",b,new JSONQLLiteral(re)); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXP ::= EXP NENCA REGEX 
            {
              JSONQLExpression RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).right;
		JSONQLExpression b = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		String re = (String)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = new JSONQLBinaryExpression("!~",b,new JSONQLLiteral(re)); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXP ::= EXP AND EXP 
            {
              JSONQLExpression RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).right;
		JSONQLExpression n1 = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression n2 = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = new JSONQLBinaryExpression("&&",n1,n2); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXP ::= EXP OR EXP 
            {
              JSONQLExpression RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).right;
		JSONQLExpression n1 = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression n2 = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = new JSONQLBinaryExpression("||",n1,n2); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OBJECT ::= LBRACE RBRACE 
            {
              JSONQLObjectExpression RESULT =null;
		 Map<JSONQLExpression, JSONQLExpression> a = new HashMap(); RESULT = new JSONQLObjectExpression(a); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("OBJECT",3, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OBJECT ::= LBRACE PAIRS RBRACE 
            {
              JSONQLObjectExpression RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).right;
		Map<JSONQLExpression,JSONQLExpression> p = (Map<JSONQLExpression,JSONQLExpression>)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).value;
		 RESULT = new JSONQLObjectExpression(p); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("OBJECT",3, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PAIRS ::= EXP COLON EXP 
            {
              Map<JSONQLExpression,JSONQLExpression> RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).right;
		JSONQLExpression k = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression v = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = new HashMap<JSONQLExpression,JSONQLExpression>(); RESULT.put(k,v); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("PAIRS",9, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PAIRS ::= PAIRS COMMA EXP COLON EXP 
            {
              Map<JSONQLExpression,JSONQLExpression> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-4)).right;
		Map<JSONQLExpression,JSONQLExpression> p = (Map<JSONQLExpression,JSONQLExpression>)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-4)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).right;
		JSONQLExpression k = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression v = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 p.put(k,v); RESULT = p; 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("PAIRS",9, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-4)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ARRAY ::= LBRACK RBRACK 
            {
              JSONQLArrayExpression RESULT =null;
		 JSONQLArrayExpression a = new JSONQLArrayExpression(); RESULT = a; 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("ARRAY",4, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ARRAY ::= LBRACK VALUES RBRACK 
            {
              JSONQLArrayExpression RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).right;
		List<JSONQLExpression> v = (List<JSONQLExpression>)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).value;
		 RESULT = new JSONQLArrayExpression(v); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("ARRAY",4, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VALUES ::= EXP 
            {
              List<JSONQLExpression> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression v = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 List<JSONQLExpression> a = List.of(v); RESULT = a; 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("VALUES",5, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VALUES ::= VALUES COMMA EXP 
            {
              List<JSONQLExpression> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).right;
		List<JSONQLExpression> a = (List<JSONQLExpression>)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression v = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 a.add(v); RESULT=a; 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("VALUES",5, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // C ::= LPARENT EXP RPARENT IF LPARENT EXP RPARENT ELSE LPARENT EXP RPARENT 
            {
              JSONQLExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-9)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-9)).right;
		JSONQLExpression e1 = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-9)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-5)).right;
		JSONQLExpression e2 = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-5)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).right;
		JSONQLExpression e3 = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).value;
		JSONQLConditionalExpression consulta = new JSONQLConditionalExpression(e1,e2,e3); RESULT = consulta; 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("C",2, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-10)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // C ::= LET ID EQ LPARENT EXP RPARENT IN LPARENT EXP RPARENT 
            {
              JSONQLExpression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-8)).right;
		JSONQLIdentifier id = (JSONQLIdentifier)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-8)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-5)).right;
		JSONQLExpression e1 = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).right;
		JSONQLExpression e2 = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).value;
		 JSONQLArrayExpression a = new JSONQLArrayExpression(e1, e2); JSONQLCallExpression e = new JSONQLCallExpression("in", a.elements); RESULT = new JSONQLProperty(id, e); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("C",2, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-9)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // C ::= ID LPARENT EXP COMMA EXP RPARENT 
            {
              JSONQLExpression RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-5)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-5)).right;
		JSONQLIdentifier f1 = (JSONQLIdentifier)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-3)).right;
		JSONQLExpression e1 = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).right;
		JSONQLExpression e2 = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).value;
		 JSONQLArrayExpression a = new JSONQLArrayExpression(e1, e2); RESULT = new JSONQLCallExpression("function", a.elements); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("C",2, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-5)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // INDIZ ::= ROOT MEM_VALUES 
            {
              JSONQLMemberExpression RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		List<JSONQLExpression> e = (List<JSONQLExpression>)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 JSONQLExpression root = new JSONQLLiteral("$"); RESULT = new JSONQLMemberExpression(root, e); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("INDIZ",10, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // MEM_VALUES ::= DOT ID 
            {
              List<JSONQLExpression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLIdentifier e = (JSONQLIdentifier)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 List<JSONQLExpression> a = new ArrayList<JSONQLExpression>(); a.add(e); RESULT = a; 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("MEM_VALUES",6, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // MEM_VALUES ::= MEM_VALUES DOT ID 
            {
              List<JSONQLExpression> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).right;
		List<JSONQLExpression> e1 = (List<JSONQLExpression>)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLIdentifier e2 = (JSONQLIdentifier)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 e1.add(e2); RESULT = e1; 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("MEM_VALUES",6, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // MEM_VALUES ::= LBRACK MEM_LIST RBRACK 
            {
              List<JSONQLExpression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).right;
		List<JSONQLExpression> e = (List<JSONQLExpression>)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).value;
		 RESULT = e; 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("MEM_VALUES",6, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // MEM_VALUES ::= MEM_VALUES LBRACK MEM_LIST RBRACK 
            {
              List<JSONQLExpression> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-3)).right;
		List<JSONQLExpression> e1 = (List<JSONQLExpression>)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).right;
		List<JSONQLExpression> e2 = (List<JSONQLExpression>)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).value;
		 e1.addAll(e2); RESULT = e1; 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("MEM_VALUES",6, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-3)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // MEM_LIST ::= MEM_ELEMENT 
            {
              List<JSONQLExpression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		List<JSONQLExpression> e = (List<JSONQLExpression>)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = e; 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("MEM_LIST",7, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // MEM_LIST ::= MEM_LIST COMMA MEM_ELEMENT 
            {
              List<JSONQLExpression> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).right;
		List<JSONQLExpression> e1 = (List<JSONQLExpression>)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		List<JSONQLExpression> e2 = (List<JSONQLExpression>)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 e1.addAll(e2); RESULT = e1; 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("MEM_LIST",7, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // MEM_ELEMENT ::= INDIZ 
            {
              List<JSONQLExpression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLMemberExpression e = (JSONQLMemberExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 List<JSONQLExpression> a = new ArrayList<JSONQLExpression>(); a.add(e); RESULT = a; 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("MEM_ELEMENT",8, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // MEM_ELEMENT ::= EXP 
            {
              List<JSONQLExpression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression e = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 List<JSONQLExpression> a = new ArrayList<JSONQLExpression>(); a.add(e); RESULT = a; 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("MEM_ELEMENT",8, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // MEM_ELEMENT ::= EXP COLON EXP 
            {
              List<JSONQLExpression> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).right;
		JSONQLExpression e1 = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression e2 = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 List<JSONQLExpression> a = new ArrayList<JSONQLExpression>(); a.add(e1); a.add(e2); RESULT = a; 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("MEM_ELEMENT",8, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // MEM_ELEMENT ::= EXP COLON 
            {
              List<JSONQLExpression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).right;
		JSONQLExpression e = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).value;
		 List<JSONQLExpression> a = new ArrayList<JSONQLExpression>(); a.add(e); RESULT = a; 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("MEM_ELEMENT",8, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // MEM_ELEMENT ::= COLON EXP 
            {
              List<JSONQLExpression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression e = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 List<JSONQLExpression> a = new ArrayList<JSONQLExpression>(); a.add(e); RESULT = a; 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("MEM_ELEMENT",8, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ACOMP ::= LBRACK VALUES BSLASH ID OPASIGN ROOT RBRACK 
            {
              JSONQLArrayComprehension RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-5)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-5)).right;
		List<JSONQLExpression> list = (List<JSONQLExpression>)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-3)).right;
		JSONQLIdentifier e = (JSONQLIdentifier)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-3)).value;
		 JSONQLArrayExpression a = new JSONQLArrayExpression(list); RESULT = new JSONQLArrayComprehension(e, a.elements); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("ACOMP",11, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-6)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$JSONQLParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$JSONQLParser$do_action(
    int                        CUP$JSONQLParser$act_num,
    java_cup.runtime.lr_parser CUP$JSONQLParser$parser,
    java.util.Stack            CUP$JSONQLParser$stack,
    int                        CUP$JSONQLParser$top)
    throws java.lang.Exception
    {
              return CUP$JSONQLParser$do_action_part00000000(
                               CUP$JSONQLParser$act_num,
                               CUP$JSONQLParser$parser,
                               CUP$JSONQLParser$stack,
                               CUP$JSONQLParser$top);
    }
}

}
