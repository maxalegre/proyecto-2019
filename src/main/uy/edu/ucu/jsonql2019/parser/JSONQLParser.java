
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package uy.edu.ucu.jsonql2019.parser;

import uy.edu.ucu.jsonql2019.ast.*;
import java.io.*;
import java.util.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class JSONQLParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return JSONQLTokens.class;
}

  /** Default constructor. */
  @Deprecated
  public JSONQLParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public JSONQLParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public JSONQLParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\064\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\004\000\002\003\004\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\004\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\004\004" +
    "\000\002\004\005\000\002\012\005\000\002\012\007\000" +
    "\002\005\004\000\002\005\005\000\002\006\003\000\002" +
    "\006\005\000\002\014\015\000\002\013\004\000\002\007" +
    "\004\000\002\007\005\000\002\007\005\000\002\007\006" +
    "\000\002\010\003\000\002\010\005\000\002\011\003\000" +
    "\002\011\003\000\002\011\005\000\002\011\004\000\002" +
    "\011\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\147\000\032\004\004\007\016\017\010\022\005\023" +
    "\021\024\012\026\011\032\024\041\017\042\015\043\022" +
    "\044\023\001\002\000\054\002\ufffd\005\ufffd\006\ufffd\011" +
    "\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd\016\ufffd\020\ufffd" +
    "\021\ufffd\022\ufffd\023\ufffd\026\127\027\ufffd\030\ufffd\031" +
    "\ufffd\033\ufffd\034\ufffd\035\ufffd\040\130\001\002\000\032" +
    "\004\026\007\027\017\010\022\005\023\021\024\012\026" +
    "\011\032\024\041\017\042\015\043\022\044\023\001\002" +
    "\000\004\002\uffff\001\002\000\004\002\124\001\002\000" +
    "\032\004\026\007\027\017\010\022\005\023\021\024\012" +
    "\026\011\032\024\041\017\042\015\043\022\044\023\001" +
    "\002\000\034\004\026\007\027\017\010\022\005\023\021" +
    "\024\012\026\011\027\115\032\024\041\017\042\015\043" +
    "\022\044\023\001\002\000\034\004\026\007\027\017\010" +
    "\022\005\023\021\024\012\025\104\026\011\032\024\041" +
    "\017\042\015\043\022\044\023\001\002\000\042\002\000" +
    "\005\034\006\041\011\036\012\042\013\043\014\035\015" +
    "\040\016\044\020\031\021\047\022\037\023\032\033\046" +
    "\034\045\035\033\001\002\000\054\002\ufff8\005\ufff8\006" +
    "\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8" +
    "\016\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8\025\ufff8\027" +
    "\ufff8\030\ufff8\031\ufff8\033\ufff8\034\ufff8\035\ufff8\001\002" +
    "\000\054\002\ufffa\005\ufffa\006\ufffa\010\ufffa\011\ufffa\012" +
    "\ufffa\013\ufffa\014\ufffa\015\ufffa\016\ufffa\020\ufffa\021\ufffa" +
    "\022\ufffa\023\ufffa\025\ufffa\027\ufffa\030\ufffa\031\ufffa\033" +
    "\ufffa\034\ufffa\035\ufffa\001\002\000\032\004\026\007\027" +
    "\017\010\022\005\023\021\024\012\026\011\032\024\041" +
    "\017\042\015\043\022\044\023\001\002\000\054\002\ufffb" +
    "\005\ufffb\006\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb\014" +
    "\ufffb\015\ufffb\016\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb" +
    "\025\ufffb\027\ufffb\030\ufffb\031\ufffb\033\ufffb\034\ufffb\035" +
    "\ufffb\001\002\000\004\002\ufffe\001\002\000\032\004\026" +
    "\007\027\017\010\022\005\023\021\024\012\026\011\032" +
    "\024\041\017\042\015\043\022\044\023\001\002\000\054" +
    "\002\ufff6\005\ufff6\006\ufff6\010\ufff6\011\ufff6\012\ufff6\013" +
    "\ufff6\014\ufff6\015\ufff6\016\ufff6\020\ufff6\021\ufff6\022\ufff6" +
    "\023\ufff6\025\ufff6\027\ufff6\030\ufff6\031\ufff6\033\ufff6\034" +
    "\ufff6\035\ufff6\001\002\000\054\002\ufffc\005\ufffc\006\ufffc" +
    "\010\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc\016" +
    "\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc\025\ufffc\027\ufffc" +
    "\030\ufffc\031\ufffc\033\ufffc\034\ufffc\035\ufffc\001\002\000" +
    "\054\002\ufff9\005\ufff9\006\ufff9\010\ufff9\011\ufff9\012\ufff9" +
    "\013\ufff9\014\ufff9\015\ufff9\016\ufff9\020\ufff9\021\ufff9\022" +
    "\ufff9\023\ufff9\025\ufff9\027\ufff9\030\ufff9\031\ufff9\033\ufff9" +
    "\034\ufff9\035\ufff9\001\002\000\054\002\ufff7\005\ufff7\006" +
    "\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7" +
    "\016\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\025\ufff7\027" +
    "\ufff7\030\ufff7\031\ufff7\033\ufff7\034\ufff7\035\ufff7\001\002" +
    "\000\054\002\ufffd\005\ufffd\006\ufffd\010\ufffd\011\ufffd\012" +
    "\ufffd\013\ufffd\014\ufffd\015\ufffd\016\ufffd\020\ufffd\021\ufffd" +
    "\022\ufffd\023\ufffd\025\ufffd\027\ufffd\030\ufffd\031\ufffd\033" +
    "\ufffd\034\ufffd\035\ufffd\001\002\000\032\004\026\007\027" +
    "\017\010\022\005\023\021\024\012\026\011\032\024\041" +
    "\017\042\015\043\022\044\023\001\002\000\054\002\ufff5" +
    "\005\034\006\041\010\ufff5\011\036\012\042\013\043\014" +
    "\035\015\040\016\044\020\031\021\047\022\ufff5\023\ufff5" +
    "\025\ufff5\027\ufff5\030\ufff5\031\ufff5\033\046\034\045\035" +
    "\033\001\002\000\032\004\026\007\027\017\010\022\005" +
    "\023\021\024\012\026\011\032\024\041\017\042\015\043" +
    "\022\044\023\001\002\000\032\004\026\007\027\017\010" +
    "\022\005\023\021\024\012\026\011\032\024\041\017\042" +
    "\015\043\022\044\023\001\002\000\004\043\064\001\002" +
    "\000\032\004\026\007\027\017\010\022\005\023\021\024" +
    "\012\026\011\032\024\041\017\042\015\043\022\044\023" +
    "\001\002\000\032\004\026\007\027\017\010\022\005\023" +
    "\021\024\012\026\011\032\024\041\017\042\015\043\022" +
    "\044\023\001\002\000\032\004\026\007\027\017\010\022" +
    "\005\023\021\024\012\026\011\032\024\041\017\042\015" +
    "\043\022\044\023\001\002\000\032\004\026\007\027\017" +
    "\010\022\005\023\021\024\012\026\011\032\024\041\017" +
    "\042\015\043\022\044\023\001\002\000\032\004\026\007" +
    "\027\017\010\022\005\023\021\024\012\026\011\032\024" +
    "\041\017\042\015\043\022\044\023\001\002\000\032\004" +
    "\026\007\027\017\010\022\005\023\021\024\012\026\011" +
    "\032\024\041\017\042\015\043\022\044\023\001\002\000" +
    "\032\004\026\007\027\017\010\022\005\023\021\024\012" +
    "\026\011\032\024\041\017\042\015\043\022\044\023\001" +
    "\002\000\032\004\026\007\027\017\010\022\005\023\021" +
    "\024\012\026\011\032\024\041\017\042\015\043\022\044" +
    "\023\001\002\000\032\004\026\007\027\017\010\022\005" +
    "\023\021\024\012\026\011\032\024\041\017\042\015\043" +
    "\022\044\023\001\002\000\004\043\052\001\002\000\004" +
    "\043\051\001\002\000\032\004\026\007\027\017\010\022" +
    "\005\023\021\024\012\026\011\032\024\041\017\042\015" +
    "\043\022\044\023\001\002\000\054\002\uffe3\005\uffe3\006" +
    "\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3" +
    "\016\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\025\uffe3\027" +
    "\uffe3\030\uffe3\031\uffe3\033\046\034\045\035\033\001\002" +
    "\000\054\002\uffe7\005\uffe7\006\uffe7\010\uffe7\011\uffe7\012" +
    "\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\020\uffe7\021\uffe7" +
    "\022\uffe7\023\uffe7\025\uffe7\027\uffe7\030\uffe7\031\uffe7\033" +
    "\uffe7\034\uffe7\035\uffe7\001\002\000\054\002\uffe6\005\uffe6" +
    "\006\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015" +
    "\uffe6\016\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\025\uffe6" +
    "\027\uffe6\030\uffe6\031\uffe6\033\uffe6\034\uffe6\035\uffe6\001" +
    "\002\000\054\002\uffe9\005\uffe9\006\uffe9\010\uffe9\011\uffe9" +
    "\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\020\uffe9\021" +
    "\uffe9\022\uffe9\023\uffe9\025\uffe9\027\uffe9\030\uffe9\031\uffe9" +
    "\033\046\034\045\035\033\001\002\000\054\002\uffec\005" +
    "\uffec\006\uffec\010\uffec\011\uffec\012\uffec\013\uffec\014\uffec" +
    "\015\uffec\016\uffec\020\uffec\021\uffec\022\uffec\023\uffec\025" +
    "\uffec\027\uffec\030\uffec\031\uffec\033\046\034\045\035\033" +
    "\001\002\000\054\002\uffed\005\uffed\006\uffed\010\uffed\011" +
    "\uffed\012\uffed\013\uffed\014\uffed\015\uffed\016\uffed\020\uffed" +
    "\021\uffed\022\uffed\023\uffed\025\uffed\027\uffed\030\uffed\031" +
    "\uffed\033\046\034\045\035\033\001\002\000\054\002\ufff1" +
    "\005\ufff1\006\ufff1\010\ufff1\011\036\012\042\013\043\014" +
    "\035\015\040\016\044\020\031\021\047\022\ufff1\023\ufff1" +
    "\025\ufff1\027\ufff1\030\ufff1\031\ufff1\033\046\034\045\035" +
    "\033\001\002\000\054\002\uffea\005\uffea\006\uffea\010\uffea" +
    "\011\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016\uffea\020" +
    "\uffea\021\uffea\022\uffea\023\uffea\025\uffea\027\uffea\030\uffea" +
    "\031\uffea\033\046\034\045\035\033\001\002\000\054\002" +
    "\ufff0\005\034\006\041\010\ufff0\011\036\012\042\013\043" +
    "\014\035\015\040\016\044\020\031\021\047\022\ufff0\023" +
    "\ufff0\025\ufff0\027\ufff0\030\ufff0\031\ufff0\033\046\034\045" +
    "\035\033\001\002\000\054\002\uffee\005\uffee\006\uffee\010" +
    "\uffee\011\uffee\012\uffee\013\uffee\014\uffee\015\uffee\016\uffee" +
    "\020\uffee\021\uffee\022\uffee\023\uffee\025\uffee\027\uffee\030" +
    "\uffee\031\uffee\033\046\034\045\035\033\001\002\000\054" +
    "\002\uffeb\005\uffeb\006\uffeb\010\uffeb\011\uffeb\012\uffeb\013" +
    "\uffeb\014\uffeb\015\uffeb\016\uffeb\020\uffeb\021\uffeb\022\uffeb" +
    "\023\uffeb\025\uffeb\027\uffeb\030\uffeb\031\uffeb\033\046\034" +
    "\045\035\033\001\002\000\054\002\ufff2\005\ufff2\006\ufff2" +
    "\010\ufff2\011\036\012\042\013\043\014\035\015\040\016" +
    "\044\020\031\021\047\022\ufff2\023\ufff2\025\ufff2\027\ufff2" +
    "\030\ufff2\031\ufff2\033\046\034\045\035\033\001\002\000" +
    "\054\002\uffe5\005\uffe5\006\uffe5\010\uffe5\011\uffe5\012\uffe5" +
    "\013\uffe5\014\uffe5\015\uffe5\016\uffe5\020\uffe5\021\uffe5\022" +
    "\uffe5\023\uffe5\025\uffe5\027\uffe5\030\uffe5\031\uffe5\033\uffe5" +
    "\034\uffe5\035\uffe5\001\002\000\054\002\uffef\005\034\006" +
    "\041\010\uffef\011\036\012\042\013\043\014\035\015\040" +
    "\016\044\020\031\021\047\022\uffef\023\uffef\025\uffef\027" +
    "\uffef\030\uffef\031\uffef\033\046\034\045\035\033\001\002" +
    "\000\054\002\uffe4\005\uffe4\006\uffe4\010\uffe4\011\uffe4\012" +
    "\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\020\uffe4\021\uffe4" +
    "\022\uffe4\023\uffe4\025\uffe4\027\uffe4\030\uffe4\031\uffe4\033" +
    "\046\034\045\035\033\001\002\000\042\005\034\006\041" +
    "\010\070\011\036\012\042\013\043\014\035\015\040\016" +
    "\044\020\031\021\047\022\037\023\032\033\046\034\045" +
    "\035\033\001\002\000\054\002\ufff3\005\ufff3\006\ufff3\010" +
    "\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3" +
    "\020\ufff3\021\ufff3\022\ufff3\023\ufff3\025\ufff3\027\ufff3\030" +
    "\ufff3\031\ufff3\033\ufff3\034\ufff3\035\ufff3\001\002\000\042" +
    "\005\034\006\041\010\072\011\036\012\042\013\043\014" +
    "\035\015\040\016\044\020\031\021\047\022\037\023\032" +
    "\033\046\034\045\035\033\001\002\000\044\002\ufff3\005" +
    "\ufff3\006\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3" +
    "\016\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\033\ufff3\034" +
    "\ufff3\035\ufff3\036\073\001\002\000\004\007\074\001\002" +
    "\000\032\004\026\007\027\017\010\022\005\023\021\024" +
    "\012\026\011\032\024\041\017\042\015\043\022\044\023" +
    "\001\002\000\042\005\034\006\041\010\076\011\036\012" +
    "\042\013\043\014\035\015\040\016\044\020\031\021\047" +
    "\022\037\023\032\033\046\034\045\035\033\001\002\000" +
    "\004\037\077\001\002\000\004\007\100\001\002\000\032" +
    "\004\026\007\027\017\010\022\005\023\021\024\012\026" +
    "\011\032\024\041\017\042\015\043\022\044\023\001\002" +
    "\000\042\005\034\006\041\010\102\011\036\012\042\013" +
    "\043\014\035\015\040\016\044\020\031\021\047\022\037" +
    "\023\032\033\046\034\045\035\033\001\002\000\004\002" +
    "\uffda\001\002\000\006\025\111\031\110\001\002\000\054" +
    "\002\uffe2\005\uffe2\006\uffe2\010\uffe2\011\uffe2\012\uffe2\013" +
    "\uffe2\014\uffe2\015\uffe2\016\uffe2\020\uffe2\021\uffe2\022\uffe2" +
    "\023\uffe2\025\uffe2\027\uffe2\030\uffe2\031\uffe2\033\uffe2\034" +
    "\uffe2\035\uffe2\001\002\000\042\005\034\006\041\011\036" +
    "\012\042\013\043\014\035\015\040\016\044\020\031\021" +
    "\047\022\037\023\032\030\106\033\046\034\045\035\033" +
    "\001\002\000\032\004\026\007\027\017\010\022\005\023" +
    "\021\024\012\026\011\032\024\041\017\042\015\043\022" +
    "\044\023\001\002\000\044\005\034\006\041\011\036\012" +
    "\042\013\043\014\035\015\040\016\044\020\031\021\047" +
    "\022\037\023\032\025\uffe0\031\uffe0\033\046\034\045\035" +
    "\033\001\002\000\032\004\026\007\027\017\010\022\005" +
    "\023\021\024\012\026\011\032\024\041\017\042\015\043" +
    "\022\044\023\001\002\000\054\002\uffe1\005\uffe1\006\uffe1" +
    "\010\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016" +
    "\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\025\uffe1\027\uffe1" +
    "\030\uffe1\031\uffe1\033\uffe1\034\uffe1\035\uffe1\001\002\000" +
    "\042\005\034\006\041\011\036\012\042\013\043\014\035" +
    "\015\040\016\044\020\031\021\047\022\037\023\032\030" +
    "\113\033\046\034\045\035\033\001\002\000\032\004\026" +
    "\007\027\017\010\022\005\023\021\024\012\026\011\032" +
    "\024\041\017\042\015\043\022\044\023\001\002\000\044" +
    "\005\034\006\041\011\036\012\042\013\043\014\035\015" +
    "\040\016\044\020\031\021\047\022\037\023\032\025\uffdf" +
    "\031\uffdf\033\046\034\045\035\033\001\002\000\054\002" +
    "\uffde\005\uffde\006\uffde\010\uffde\011\uffde\012\uffde\013\uffde" +
    "\014\uffde\015\uffde\016\uffde\020\uffde\021\uffde\022\uffde\023" +
    "\uffde\025\uffde\027\uffde\030\uffde\031\uffde\033\uffde\034\uffde" +
    "\035\uffde\001\002\000\006\027\120\031\121\001\002\000" +
    "\044\005\034\006\041\011\036\012\042\013\043\014\035" +
    "\015\040\016\044\020\031\021\047\022\037\023\032\027" +
    "\uffdc\031\uffdc\033\046\034\045\035\033\001\002\000\054" +
    "\002\uffdd\005\uffdd\006\uffdd\010\uffdd\011\uffdd\012\uffdd\013" +
    "\uffdd\014\uffdd\015\uffdd\016\uffdd\020\uffdd\021\uffdd\022\uffdd" +
    "\023\uffdd\025\uffdd\027\uffdd\030\uffdd\031\uffdd\033\uffdd\034" +
    "\uffdd\035\uffdd\001\002\000\032\004\026\007\027\017\010" +
    "\022\005\023\021\024\012\026\011\032\024\041\017\042" +
    "\015\043\022\044\023\001\002\000\044\005\034\006\041" +
    "\011\036\012\042\013\043\014\035\015\040\016\044\020" +
    "\031\021\047\022\037\023\032\027\uffdb\031\uffdb\033\046" +
    "\034\045\035\033\001\002\000\054\002\uffe8\005\034\006" +
    "\041\010\uffe8\011\036\012\042\013\043\014\035\015\040" +
    "\016\044\020\031\021\047\022\037\023\032\025\uffe8\027" +
    "\uffe8\030\uffe8\031\uffe8\033\046\034\045\035\033\001\002" +
    "\000\004\002\001\001\002\000\054\002\ufff4\005\034\006" +
    "\041\010\ufff4\011\036\012\042\013\043\014\035\015\040" +
    "\016\044\020\031\021\047\022\ufff4\023\ufff4\025\ufff4\027" +
    "\ufff4\030\ufff4\031\ufff4\033\046\034\045\035\033\001\002" +
    "\000\014\002\uffd9\026\145\027\uffd9\031\uffd9\040\146\001" +
    "\002\000\034\004\004\007\027\017\010\022\005\023\021" +
    "\024\012\026\011\030\134\032\024\041\017\042\015\043" +
    "\022\044\023\001\002\000\004\045\131\001\002\000\014" +
    "\002\uffd8\026\uffd8\027\uffd8\031\uffd8\040\uffd8\001\002\000" +
    "\006\027\143\031\142\001\002\000\006\027\uffd2\031\uffd2" +
    "\001\002\000\032\004\026\007\027\017\010\022\005\023" +
    "\021\024\012\026\011\032\024\041\017\042\015\043\022" +
    "\044\023\001\002\000\046\005\034\006\041\011\036\012" +
    "\042\013\043\014\035\015\040\016\044\020\031\021\047" +
    "\022\037\023\032\027\uffd1\030\137\031\uffd1\033\046\034" +
    "\045\035\033\001\002\000\006\027\uffd4\031\uffd4\001\002" +
    "\000\036\004\026\007\027\017\010\022\005\023\021\024" +
    "\012\026\011\027\uffcf\031\uffcf\032\024\041\017\042\015" +
    "\043\022\044\023\001\002\000\044\005\034\006\041\011" +
    "\036\012\042\013\043\014\035\015\040\016\044\020\031" +
    "\021\047\022\037\023\032\027\uffd0\031\uffd0\033\046\034" +
    "\045\035\033\001\002\000\044\005\034\006\041\011\036" +
    "\012\042\013\043\014\035\015\040\016\044\020\031\021" +
    "\047\022\037\023\032\027\uffce\031\uffce\033\046\034\045" +
    "\035\033\001\002\000\034\004\004\007\027\017\010\022" +
    "\005\023\021\024\012\026\011\030\134\032\024\041\017" +
    "\042\015\043\022\044\023\001\002\000\014\002\uffd6\026" +
    "\uffd6\027\uffd6\031\uffd6\040\uffd6\001\002\000\006\027\uffd3" +
    "\031\uffd3\001\002\000\034\004\004\007\027\017\010\022" +
    "\005\023\021\024\012\026\011\030\134\032\024\041\017" +
    "\042\015\043\022\044\023\001\002\000\004\045\147\001" +
    "\002\000\014\002\uffd7\026\uffd7\027\uffd7\031\uffd7\040\uffd7" +
    "\001\002\000\006\027\151\031\142\001\002\000\014\002" +
    "\uffd5\026\uffd5\027\uffd5\031\uffd5\040\uffd5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\147\000\016\002\006\003\012\004\013\005\024\013" +
    "\005\014\017\001\001\000\004\007\125\001\001\000\010" +
    "\003\124\004\013\005\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\122\004\013\005\024\001\001" +
    "\000\012\003\116\004\013\005\024\006\115\001\001\000" +
    "\012\003\104\004\013\005\024\012\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\070\004\013\005\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\003\027\004\013\005\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\066\004\013\005" +
    "\024\001\001\000\002\001\001\000\010\003\065\004\013" +
    "\005\024\001\001\000\010\003\064\004\013\005\024\001" +
    "\001\000\002\001\001\000\010\003\062\004\013\005\024" +
    "\001\001\000\010\003\061\004\013\005\024\001\001\000" +
    "\010\003\060\004\013\005\024\001\001\000\010\003\057" +
    "\004\013\005\024\001\001\000\010\003\056\004\013\005" +
    "\024\001\001\000\010\003\055\004\013\005\024\001\001" +
    "\000\010\003\054\004\013\005\024\001\001\000\010\003" +
    "\053\004\013\005\024\001\001\000\010\003\052\004\013" +
    "\005\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\047\004\013\005\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\003\074\004\013\005\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\100\004\013" +
    "\005\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\003\106\004\013\005\024\001\001\000\002\001\001\000" +
    "\010\003\111\004\013\005\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\003\113\004\013\005\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\121\004" +
    "\013\005\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\003\134\004\013\005\024\010\131\011\135\013\132" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\003\140\004\013\005\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\137\004\013\005\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\003\134\004\013\005\024\011\143\013" +
    "\132\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\134\004\013\005\024\010\147\011\135\013\132\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$JSONQLParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$JSONQLParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$JSONQLParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public void syntax_error(Symbol currentToken) {
		report_error("Syntax error at [" + (currentToken.left+1) +"," + (currentToken.right+1) +"]", null);
	}

	public static Symbol parse(Reader input) throws Exception {
		return (new JSONQLParser(new JSONQLLexer(input))).parse();
	}

	public static void main(String[] args) throws Exception {
		if (args.length < 1) {
			System.out.println(parse(new InputStreamReader(System.in, "UTF8")).value);
		} else for (int i = 0; i < args.length; ++i) {
			System.out.println(parse(new InputStreamReader(new FileInputStream(args[i]), "UTF8")).value);
		}
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$JSONQLParser$actions {
  private final JSONQLParser parser;

  /** Constructor */
  CUP$JSONQLParser$actions(JSONQLParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$JSONQLParser$do_action_part00000000(
    int                        CUP$JSONQLParser$act_num,
    java_cup.runtime.lr_parser CUP$JSONQLParser$parser,
    java.util.Stack            CUP$JSONQLParser$stack,
    int                        CUP$JSONQLParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$JSONQLParser$result;

      /* select the action based on the action number */
      switch (CUP$JSONQLParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).right;
		JSONQLExpression start_val = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).value;
		RESULT = start_val;
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$JSONQLParser$parser.done_parsing();
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= EXP 
            {
              JSONQLExpression RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression op = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = op; 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= INDIZ 
            {
              JSONQLExpression RESULT =null;
		int indleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int indright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLMemberExpression ind = (JSONQLMemberExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = ind; 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= C 
            {
              JSONQLExpression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression s = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		RESULT=s;
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // EXP ::= ROOT 
            {
              JSONQLExpression RESULT =null;
		 RESULT = JSONQLRoot.ROOT; 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // EXP ::= BOOL 
            {
              JSONQLExpression RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = new JSONQLLiteral(b); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // EXP ::= NUMBER 
            {
              JSONQLExpression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = new JSONQLLiteral(n); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // EXP ::= STRING 
            {
              JSONQLExpression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = new JSONQLLiteral(s); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // EXP ::= NULL 
            {
              JSONQLExpression RESULT =null;
		RESULT = new JSONQLLiteral(null); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // EXP ::= OBJECT 
            {
              JSONQLExpression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLObjectExpression o = (JSONQLObjectExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = o; 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // EXP ::= ARRAY 
            {
              JSONQLExpression RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLArrayExpression a = (JSONQLArrayExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = a; 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // EXP ::= REGEX 
            {
              JSONQLExpression RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		String re = (String)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT= new JSONQLLiteral(re); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // EXP ::= MINUS EXP 
            {
              JSONQLExpression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression n = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = new JSONQLUnaryExpression("-",n); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EXP ::= PLUS EXP 
            {
              JSONQLExpression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression n = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = new JSONQLUnaryExpression("+",n); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EXP ::= LPARENT EXP RPARENT 
            {
              JSONQLExpression RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).right;
		JSONQLExpression r = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).value;
		 RESULT = r; 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EXP ::= EXP MULT EXP 
            {
              JSONQLExpression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).right;
		JSONQLExpression l = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression r = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = new JSONQLBinaryExpression("*",l,r); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EXP ::= EXP DIV EXP 
            {
              JSONQLExpression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).right;
		JSONQLExpression l = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression r = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = new JSONQLBinaryExpression("/",l,r); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EXP ::= EXP PLUS EXP 
            {
              JSONQLExpression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).right;
		JSONQLExpression l = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression r = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = new JSONQLBinaryExpression("+",l,r); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EXP ::= EXP MINUS EXP 
            {
              JSONQLExpression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).right;
		JSONQLExpression l = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression r = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = new JSONQLBinaryExpression("-",l,r); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXP ::= EXP EQUAL EXP 
            {
              JSONQLExpression RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).right;
		JSONQLExpression n1 = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression n2 = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = new JSONQLBinaryExpression("==",n1,n2); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXP ::= EXP NOT_EQUAL EXP 
            {
              JSONQLExpression RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).right;
		JSONQLExpression n1 = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression n2 = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = new JSONQLBinaryExpression("!=",n1,n2); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXP ::= EXP LESS EXP 
            {
              JSONQLExpression RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).right;
		JSONQLExpression n1 = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression n2 = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = new JSONQLBinaryExpression("<",n1,n2); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXP ::= EXP GREATER EXP 
            {
              JSONQLExpression RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).right;
		JSONQLExpression n1 = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression n2 = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = new JSONQLBinaryExpression(">",n1,n2); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXP ::= EXP LESS_EQUAL EXP 
            {
              JSONQLExpression RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).right;
		JSONQLExpression n1 = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression n2 = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = new JSONQLBinaryExpression("<=",n1,n2); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXP ::= EXP GREATER_EQUAL EXP 
            {
              JSONQLExpression RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).right;
		JSONQLExpression n1 = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression n2 = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = new JSONQLBinaryExpression(">=",n1,n2); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXP ::= NOT EXP 
            {
              JSONQLExpression RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression b = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = new JSONQLUnaryExpression("!",b); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXP ::= EXP ENC REGEX 
            {
              JSONQLExpression RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).right;
		JSONQLExpression b = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		String re = (String)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = new JSONQLBinaryExpression("~",b,new JSONQLLiteral(re)); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXP ::= EXP ENCA REGEX 
            {
              JSONQLExpression RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).right;
		JSONQLExpression b = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		String re = (String)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = new JSONQLBinaryExpression("~=",b,new JSONQLLiteral(re)); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXP ::= EXP NENCA REGEX 
            {
              JSONQLExpression RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).right;
		JSONQLExpression b = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		String re = (String)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = new JSONQLBinaryExpression("!~",b,new JSONQLLiteral(re)); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXP ::= EXP AND EXP 
            {
              JSONQLExpression RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).right;
		JSONQLExpression n1 = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression n2 = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = new JSONQLBinaryExpression("&&",n1,n2); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXP ::= EXP OR EXP 
            {
              JSONQLExpression RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).right;
		JSONQLExpression n1 = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression n2 = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = new JSONQLBinaryExpression("||",n1,n2); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OBJECT ::= LBRACE RBRACE 
            {
              JSONQLObjectExpression RESULT =null;
		 Map<JSONQLExpression, JSONQLExpression> a = new HashMap(); RESULT = new JSONQLObjectExpression(a); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("OBJECT",2, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OBJECT ::= LBRACE PAIRS RBRACE 
            {
              JSONQLObjectExpression RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).right;
		Map<JSONQLExpression,JSONQLExpression> p = (Map<JSONQLExpression,JSONQLExpression>)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).value;
		 RESULT = new JSONQLObjectExpression(p); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("OBJECT",2, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PAIRS ::= EXP COLON EXP 
            {
              Map<JSONQLExpression,JSONQLExpression> RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).right;
		JSONQLExpression k = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression v = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = new HashMap<JSONQLExpression,JSONQLExpression>(); RESULT.put(k,v); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("PAIRS",8, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PAIRS ::= PAIRS COMMA EXP COLON EXP 
            {
              Map<JSONQLExpression,JSONQLExpression> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-4)).right;
		Map<JSONQLExpression,JSONQLExpression> p = (Map<JSONQLExpression,JSONQLExpression>)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-4)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).right;
		JSONQLExpression k = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression v = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 p.put(k,v); RESULT = p; 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("PAIRS",8, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-4)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ARRAY ::= LBRACK RBRACK 
            {
              JSONQLArrayExpression RESULT =null;
		 JSONQLArrayExpression a = new JSONQLArrayExpression(); RESULT = a; 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("ARRAY",3, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ARRAY ::= LBRACK VALUES RBRACK 
            {
              JSONQLArrayExpression RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).right;
		List<JSONQLExpression> v = (List<JSONQLExpression>)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).value;
		 RESULT = new JSONQLArrayExpression(v); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("ARRAY",3, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VALUES ::= EXP 
            {
              List<JSONQLExpression> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression v = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 List<JSONQLExpression> a = List.of(v); RESULT = a; 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("VALUES",4, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VALUES ::= VALUES COMMA EXP 
            {
              List<JSONQLExpression> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).right;
		List<JSONQLExpression> a = (List<JSONQLExpression>)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression v = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 a.add(v); RESULT=a; 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("VALUES",4, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // C ::= LPARENT EXP RPARENT IF LPARENT EXP RPARENT ELSE LPARENT EXP RPARENT 
            {
              JSONQLExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-9)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-9)).right;
		JSONQLExpression e1 = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-9)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-5)).right;
		JSONQLExpression e2 = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-5)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).right;
		JSONQLExpression e3 = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).value;
		JSONQLConditionalExpression consulta = new JSONQLConditionalExpression(e1,e2,e3); RESULT = consulta; 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("C",10, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-10)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INDIZ ::= ROOT MEM_VALUES 
            {
              JSONQLMemberExpression RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		List<JSONQLExpression> e = (List<JSONQLExpression>)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 JSONQLExpression root = new JSONQLLiteral("$"); RESULT = new JSONQLMemberExpression(root, e); 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("INDIZ",9, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // MEM_VALUES ::= DOT ID 
            {
              List<JSONQLExpression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLIdentifier e = (JSONQLIdentifier)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 List<JSONQLExpression> a = new ArrayList<JSONQLExpression>(); a.add(e); RESULT = a; 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("MEM_VALUES",5, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // MEM_VALUES ::= MEM_VALUES DOT ID 
            {
              List<JSONQLExpression> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).right;
		List<JSONQLExpression> e1 = (List<JSONQLExpression>)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLIdentifier e2 = (JSONQLIdentifier)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 e1.add(e2); RESULT = e1; 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("MEM_VALUES",5, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // MEM_VALUES ::= LBRACK MEM_LIST RBRACK 
            {
              List<JSONQLExpression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).right;
		List<JSONQLExpression> e = (List<JSONQLExpression>)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).value;
		 RESULT = e; 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("MEM_VALUES",5, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // MEM_VALUES ::= MEM_VALUES LBRACK MEM_LIST RBRACK 
            {
              List<JSONQLExpression> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-3)).right;
		List<JSONQLExpression> e1 = (List<JSONQLExpression>)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).right;
		List<JSONQLExpression> e2 = (List<JSONQLExpression>)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).value;
		 e1.addAll(e2); RESULT = e1; 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("MEM_VALUES",5, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-3)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // MEM_LIST ::= MEM_ELEMENT 
            {
              List<JSONQLExpression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		List<JSONQLExpression> e = (List<JSONQLExpression>)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 RESULT = e; 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("MEM_LIST",6, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // MEM_LIST ::= MEM_LIST COMMA MEM_ELEMENT 
            {
              List<JSONQLExpression> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).right;
		List<JSONQLExpression> e1 = (List<JSONQLExpression>)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		List<JSONQLExpression> e2 = (List<JSONQLExpression>)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 e1.addAll(e2); RESULT = e1; 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("MEM_LIST",6, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // MEM_ELEMENT ::= INDIZ 
            {
              List<JSONQLExpression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLMemberExpression e = (JSONQLMemberExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 List<JSONQLExpression> a = new ArrayList<JSONQLExpression>(); a.add(e); RESULT = a; 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("MEM_ELEMENT",7, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // MEM_ELEMENT ::= EXP 
            {
              List<JSONQLExpression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression e = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 List<JSONQLExpression> a = new ArrayList<JSONQLExpression>(); a.add(e); RESULT = a; 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("MEM_ELEMENT",7, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // MEM_ELEMENT ::= EXP COLON EXP 
            {
              List<JSONQLExpression> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).right;
		JSONQLExpression e1 = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression e2 = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 List<JSONQLExpression> a = new ArrayList<JSONQLExpression>(); a.add(e1); a.add(e2); RESULT = a; 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("MEM_ELEMENT",7, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // MEM_ELEMENT ::= EXP COLON 
            {
              List<JSONQLExpression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).right;
		JSONQLExpression e = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)).value;
		 List<JSONQLExpression> a = new ArrayList<JSONQLExpression>(); a.add(e); RESULT = a; 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("MEM_ELEMENT",7, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // MEM_ELEMENT ::= COLON EXP 
            {
              List<JSONQLExpression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()).right;
		JSONQLExpression e = (JSONQLExpression)((java_cup.runtime.Symbol) CUP$JSONQLParser$stack.peek()).value;
		 List<JSONQLExpression> a = new ArrayList<JSONQLExpression>(); a.add(e); RESULT = a; 
              CUP$JSONQLParser$result = parser.getSymbolFactory().newSymbol("MEM_ELEMENT",7, ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.elementAt(CUP$JSONQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSONQLParser$stack.peek()), RESULT);
            }
          return CUP$JSONQLParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$JSONQLParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$JSONQLParser$do_action(
    int                        CUP$JSONQLParser$act_num,
    java_cup.runtime.lr_parser CUP$JSONQLParser$parser,
    java.util.Stack            CUP$JSONQLParser$stack,
    int                        CUP$JSONQLParser$top)
    throws java.lang.Exception
    {
              return CUP$JSONQLParser$do_action_part00000000(
                               CUP$JSONQLParser$act_num,
                               CUP$JSONQLParser$parser,
                               CUP$JSONQLParser$stack,
                               CUP$JSONQLParser$top);
    }
}

}
